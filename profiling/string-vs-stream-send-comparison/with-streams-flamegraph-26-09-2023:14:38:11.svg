<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1400" height="614" onload="init(evt)" viewBox="0 0 1400 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1390" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1390" y="597.00"> </text><svg id="frames" x="10" width="1380" total_samples="469"><g><title>AConnection::onPollEvent (1 samples, 0.21%)</title><rect x="0.0000%" y="533" width="0.2132%" height="15" fill="rgb(240,200,10)" fg:x="0" fg:w="1"/><text x="0.2143%" y="543.50"></text></g><g><title>AConnection::onPollOut (1 samples, 0.21%)</title><rect x="0.0000%" y="517" width="0.2132%" height="15" fill="rgb(247,1,19)" fg:x="0" fg:w="1"/><text x="0.2143%" y="527.50"></text></g><g><title>ListenSocket::onPollEvent (1 samples, 0.21%)</title><rect x="0.2132%" y="533" width="0.2132%" height="15" fill="rgb(234,106,36)" fg:x="1" fg:w="1"/><text x="0.4275%" y="543.50"></text></g><g><title>Address::~Address (1 samples, 0.21%)</title><rect x="0.2132%" y="517" width="0.2132%" height="15" fill="rgb(211,197,29)" fg:x="1" fg:w="1"/><text x="0.4275%" y="527.50"></text></g><g><title>__GI___strftime_l (2 samples, 0.43%)</title><rect x="1.0661%" y="405" width="0.4264%" height="15" fill="rgb(252,21,16)" fg:x="5" fg:w="2"/><text x="1.2804%" y="415.50"></text></g><g><title>__strftime_internal (2 samples, 0.43%)</title><rect x="1.0661%" y="389" width="0.4264%" height="15" fill="rgb(239,20,42)" fg:x="5" fg:w="2"/><text x="1.2804%" y="399.50"></text></g><g><title>endsWith (1 samples, 0.21%)</title><rect x="1.4925%" y="405" width="0.2132%" height="15" fill="rgb(245,132,52)" fg:x="7" fg:w="1"/><text x="1.7068%" y="415.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1 samples, 0.21%)</title><rect x="1.4925%" y="389" width="0.2132%" height="15" fill="rgb(212,2,49)" fg:x="7" fg:w="1"/><text x="1.7068%" y="399.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.21%)</title><rect x="1.4925%" y="373" width="0.2132%" height="15" fill="rgb(218,215,11)" fg:x="7" fg:w="1"/><text x="1.7068%" y="383.50"></text></g><g><title>getTime (4 samples, 0.85%)</title><rect x="1.0661%" y="421" width="0.8529%" height="15" fill="rgb(245,134,19)" fg:x="5" fg:w="4"/><text x="1.2804%" y="431.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.21%)</title><rect x="1.7058%" y="405" width="0.2132%" height="15" fill="rgb(216,50,33)" fg:x="8" fg:w="1"/><text x="1.9200%" y="415.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.21%)</title><rect x="1.7058%" y="389" width="0.2132%" height="15" fill="rgb(250,46,35)" fg:x="8" fg:w="1"/><text x="1.9200%" y="399.50"></text></g><g><title>operator new (1 samples, 0.21%)</title><rect x="1.7058%" y="373" width="0.2132%" height="15" fill="rgb(214,91,1)" fg:x="8" fg:w="1"/><text x="1.9200%" y="383.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.21%)</title><rect x="1.7058%" y="357" width="0.2132%" height="15" fill="rgb(206,112,53)" fg:x="8" fg:w="1"/><text x="1.9200%" y="367.50"></text></g><g><title>tcache_get (1 samples, 0.21%)</title><rect x="1.7058%" y="341" width="0.2132%" height="15" fill="rgb(227,126,51)" fg:x="8" fg:w="1"/><text x="1.9200%" y="351.50"></text></g><g><title>File::lastModified (5 samples, 1.07%)</title><rect x="1.0661%" y="437" width="1.0661%" height="15" fill="rgb(230,175,3)" fg:x="5" fg:w="5"/><text x="1.2804%" y="447.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.21%)</title><rect x="1.9190%" y="421" width="0.2132%" height="15" fill="rgb(216,41,4)" fg:x="9" fg:w="1"/><text x="2.1333%" y="431.50"></text></g><g><title>VirtualHost::getMimeType (1 samples, 0.21%)</title><rect x="2.1322%" y="437" width="0.2132%" height="15" fill="rgb(228,222,25)" fg:x="10" fg:w="1"/><text x="2.3465%" y="447.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.21%)</title><rect x="2.3454%" y="437" width="0.2132%" height="15" fill="rgb(244,92,22)" fg:x="11" fg:w="1"/><text x="2.5597%" y="447.50"></text></g><g><title>std::__basic_file&lt;char&gt;::open (1 samples, 0.21%)</title><rect x="2.5586%" y="405" width="0.2132%" height="15" fill="rgb(253,221,0)" fg:x="12" fg:w="1"/><text x="2.7729%" y="415.50"></text></g><g><title>_IO_new_fopen (1 samples, 0.21%)</title><rect x="2.5586%" y="389" width="0.2132%" height="15" fill="rgb(236,194,9)" fg:x="12" fg:w="1"/><text x="2.7729%" y="399.50"></text></g><g><title>__fopen_internal (1 samples, 0.21%)</title><rect x="2.5586%" y="373" width="0.2132%" height="15" fill="rgb(220,73,20)" fg:x="12" fg:w="1"/><text x="2.7729%" y="383.50"></text></g><g><title>_IO_new_file_init_internal (1 samples, 0.21%)</title><rect x="2.5586%" y="357" width="0.2132%" height="15" fill="rgb(207,110,54)" fg:x="12" fg:w="1"/><text x="2.7729%" y="367.50"></text></g><g><title>__GI__IO_link_in (1 samples, 0.21%)</title><rect x="2.5586%" y="341" width="0.2132%" height="15" fill="rgb(234,194,43)" fg:x="12" fg:w="1"/><text x="2.7729%" y="351.50"></text></g><g><title>__GI___libc_cleanup_push_defer (1 samples, 0.21%)</title><rect x="2.5586%" y="325" width="0.2132%" height="15" fill="rgb(215,34,33)" fg:x="12" fg:w="1"/><text x="2.7729%" y="335.50"></text></g><g><title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (2 samples, 0.43%)</title><rect x="2.5586%" y="421" width="0.4264%" height="15" fill="rgb(232,25,18)" fg:x="12" fg:w="2"/><text x="2.7729%" y="431.50"></text></g><g><title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_allocate_internal_buffer (1 samples, 0.21%)</title><rect x="2.7719%" y="405" width="0.2132%" height="15" fill="rgb(231,75,9)" fg:x="13" fg:w="1"/><text x="2.9861%" y="415.50"></text></g><g><title>operator new (1 samples, 0.21%)</title><rect x="2.7719%" y="389" width="0.2132%" height="15" fill="rgb(214,91,1)" fg:x="13" fg:w="1"/><text x="2.9861%" y="399.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.21%)</title><rect x="2.7719%" y="373" width="0.2132%" height="15" fill="rgb(206,112,53)" fg:x="13" fg:w="1"/><text x="2.9861%" y="383.50"></text></g><g><title>_int_malloc (1 samples, 0.21%)</title><rect x="2.7719%" y="357" width="0.2132%" height="15" fill="rgb(222,219,51)" fg:x="13" fg:w="1"/><text x="2.9861%" y="367.50"></text></g><g><title>unlink_chunk (1 samples, 0.21%)</title><rect x="2.7719%" y="341" width="0.2132%" height="15" fill="rgb(223,20,30)" fg:x="13" fg:w="1"/><text x="2.9861%" y="351.50"></text></g><g><title>std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_ifstream (3 samples, 0.64%)</title><rect x="2.5586%" y="437" width="0.6397%" height="15" fill="rgb(230,170,3)" fg:x="12" fg:w="3"/><text x="2.7729%" y="447.50"></text></g><g><title>std::ios_base::ios_base (1 samples, 0.21%)</title><rect x="2.9851%" y="421" width="0.2132%" height="15" fill="rgb(227,77,35)" fg:x="14" fg:w="1"/><text x="3.1994%" y="431.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.21%)</title><rect x="3.1983%" y="437" width="0.2132%" height="15" fill="rgb(250,181,37)" fg:x="15" fg:w="1"/><text x="3.4126%" y="447.50"></text></g><g><title>Http::processFile (15 samples, 3.20%)</title><rect x="0.4264%" y="453" width="3.1983%" height="15" fill="rgb(253,96,38)" fg:x="2" fg:w="15"/><text x="0.6407%" y="463.50">Http..</text></g><g><title>toString&lt;unsigned long&gt; (1 samples, 0.21%)</title><rect x="3.4115%" y="437" width="0.2132%" height="15" fill="rgb(226,165,29)" fg:x="16" fg:w="1"/><text x="3.6258%" y="447.50"></text></g><g><title>std::ostream::_M_insert&lt;unsigned long&gt; (1 samples, 0.21%)</title><rect x="3.4115%" y="421" width="0.2132%" height="15" fill="rgb(226,22,13)" fg:x="16" fg:w="1"/><text x="3.6258%" y="431.50"></text></g><g><title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (1 samples, 0.21%)</title><rect x="3.4115%" y="405" width="0.2132%" height="15" fill="rgb(243,180,8)" fg:x="16" fg:w="1"/><text x="3.6258%" y="415.50"></text></g><g><title>startsWith (1 samples, 0.21%)</title><rect x="3.6247%" y="421" width="0.2132%" height="15" fill="rgb(208,27,37)" fg:x="17" fg:w="1"/><text x="3.8390%" y="431.50"></text></g><g><title>Request::isValid (2 samples, 0.43%)</title><rect x="3.6247%" y="453" width="0.4264%" height="15" fill="rgb(210,87,46)" fg:x="17" fg:w="2"/><text x="3.8390%" y="463.50"></text></g><g><title>Uri::pathOutOfBound (2 samples, 0.43%)</title><rect x="3.6247%" y="437" width="0.4264%" height="15" fill="rgb(218,183,48)" fg:x="17" fg:w="2"/><text x="3.8390%" y="447.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.21%)</title><rect x="3.8380%" y="421" width="0.2132%" height="15" fill="rgb(240,176,52)" fg:x="18" fg:w="1"/><text x="4.0522%" y="431.50"></text></g><g><title>Uri::decode (1 samples, 0.21%)</title><rect x="4.0512%" y="453" width="0.2132%" height="15" fill="rgb(233,44,47)" fg:x="19" fg:w="1"/><text x="4.2655%" y="463.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.21%)</title><rect x="4.0512%" y="437" width="0.2132%" height="15" fill="rgb(216,41,4)" fg:x="19" fg:w="1"/><text x="4.2655%" y="447.50"></text></g><g><title>endsWith (1 samples, 0.21%)</title><rect x="4.2644%" y="437" width="0.2132%" height="15" fill="rgb(245,132,52)" fg:x="20" fg:w="1"/><text x="4.4787%" y="447.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1 samples, 0.21%)</title><rect x="4.2644%" y="421" width="0.2132%" height="15" fill="rgb(212,2,49)" fg:x="20" fg:w="1"/><text x="4.4787%" y="431.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.21%)</title><rect x="4.2644%" y="405" width="0.2132%" height="15" fill="rgb(218,215,11)" fg:x="20" fg:w="1"/><text x="4.4787%" y="415.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (2 samples, 0.43%)</title><rect x="4.4776%" y="437" width="0.4264%" height="15" fill="rgb(254,182,12)" fg:x="21" fg:w="2"/><text x="4.6919%" y="447.50"></text></g><g><title>std::distance&lt;char*&gt; (1 samples, 0.21%)</title><rect x="4.6908%" y="421" width="0.2132%" height="15" fill="rgb(213,138,18)" fg:x="22" fg:w="1"/><text x="4.9051%" y="431.50"></text></g><g><title>std::__distance&lt;char*&gt; (1 samples, 0.21%)</title><rect x="4.6908%" y="405" width="0.2132%" height="15" fill="rgb(217,187,25)" fg:x="22" fg:w="1"/><text x="4.9051%" y="415.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.21%)</title><rect x="4.9041%" y="437" width="0.2132%" height="15" fill="rgb(244,92,22)" fg:x="23" fg:w="1"/><text x="5.1183%" y="447.50"></text></g><g><title>VirtualHost::matchLocation (5 samples, 1.07%)</title><rect x="4.2644%" y="453" width="1.0661%" height="15" fill="rgb(243,79,28)" fg:x="20" fg:w="5"/><text x="4.4787%" y="463.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (1 samples, 0.21%)</title><rect x="5.1173%" y="437" width="0.2132%" height="15" fill="rgb(247,126,12)" fg:x="24" fg:w="1"/><text x="5.3316%" y="447.50"></text></g><g><title>__strlen_avx2 (1 samples, 0.21%)</title><rect x="5.1173%" y="421" width="0.2132%" height="15" fill="rgb(251,163,19)" fg:x="24" fg:w="1"/><text x="5.3316%" y="431.50"></text></g><g><title>Http::processRequest (25 samples, 5.33%)</title><rect x="0.4264%" y="469" width="5.3305%" height="15" fill="rgb(223,169,38)" fg:x="2" fg:w="25"/><text x="0.6407%" y="479.50">Http::pr..</text></g><g><title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.43%)</title><rect x="5.3305%" y="453" width="0.4264%" height="15" fill="rgb(226,32,40)" fg:x="25" fg:w="2"/><text x="5.5448%" y="463.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.21%)</title><rect x="5.5437%" y="437" width="0.2132%" height="15" fill="rgb(254,182,12)" fg:x="26" fg:w="1"/><text x="5.7580%" y="447.50"></text></g><g><title>AConnection::send (1 samples, 0.21%)</title><rect x="5.7569%" y="453" width="0.2132%" height="15" fill="rgb(252,37,44)" fg:x="27" fg:w="1"/><text x="5.9712%" y="463.50"></text></g><g><title>Poll::addPollEvent (1 samples, 0.21%)</title><rect x="5.7569%" y="437" width="0.2132%" height="15" fill="rgb(243,35,49)" fg:x="27" fg:w="1"/><text x="5.9712%" y="447.50"></text></g><g><title>std::vector&lt;IFileDescriptor*, std::allocator&lt;IFileDescriptor*&gt; &gt;::begin (1 samples, 0.21%)</title><rect x="5.7569%" y="421" width="0.2132%" height="15" fill="rgb(229,65,8)" fg:x="27" fg:w="1"/><text x="5.9712%" y="431.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;IFileDescriptor**, std::vector&lt;IFileDescriptor*, std::allocator&lt;IFileDescriptor*&gt; &gt; &gt;::__normal_iterator (1 samples, 0.21%)</title><rect x="5.7569%" y="405" width="0.2132%" height="15" fill="rgb(230,36,54)" fg:x="27" fg:w="1"/><text x="5.9712%" y="415.50"></text></g><g><title>__GI___libc_free (1 samples, 0.21%)</title><rect x="5.9701%" y="437" width="0.2132%" height="15" fill="rgb(247,8,17)" fg:x="28" fg:w="1"/><text x="6.1844%" y="447.50"></text></g><g><title>operator delete (1 samples, 0.21%)</title><rect x="6.1834%" y="437" width="0.2132%" height="15" fill="rgb(249,165,17)" fg:x="29" fg:w="1"/><text x="6.3977%" y="447.50"></text></g><g><title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.21%)</title><rect x="6.3966%" y="437" width="0.2132%" height="15" fill="rgb(222,170,8)" fg:x="30" fg:w="1"/><text x="6.6109%" y="447.50"></text></g><g><title>__GI__IO_fwrite (1 samples, 0.21%)</title><rect x="6.3966%" y="421" width="0.2132%" height="15" fill="rgb(244,69,17)" fg:x="30" fg:w="1"/><text x="6.6109%" y="431.50"></text></g><g><title>_IO_new_file_xsputn (1 samples, 0.21%)</title><rect x="6.3966%" y="405" width="0.2132%" height="15" fill="rgb(251,170,42)" fg:x="30" fg:w="1"/><text x="6.6109%" y="415.50"></text></g><g><title>_IO_new_file_xsputn (1 samples, 0.21%)</title><rect x="6.3966%" y="389" width="0.2132%" height="15" fill="rgb(251,170,42)" fg:x="30" fg:w="1"/><text x="6.6109%" y="399.50"></text></g><g><title>__GI__IO_default_xsputn (1 samples, 0.21%)</title><rect x="6.3966%" y="373" width="0.2132%" height="15" fill="rgb(222,196,23)" fg:x="30" fg:w="1"/><text x="6.6109%" y="383.50"></text></g><g><title>__GI__IO_default_xsputn (1 samples, 0.21%)</title><rect x="6.3966%" y="357" width="0.2132%" height="15" fill="rgb(222,196,23)" fg:x="30" fg:w="1"/><text x="6.6109%" y="367.50"></text></g><g><title>std::endl&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.21%)</title><rect x="6.6098%" y="437" width="0.2132%" height="15" fill="rgb(246,112,30)" fg:x="31" fg:w="1"/><text x="6.8241%" y="447.50"></text></g><g><title>std::ostream::put (1 samples, 0.21%)</title><rect x="6.6098%" y="421" width="0.2132%" height="15" fill="rgb(226,61,44)" fg:x="31" fg:w="1"/><text x="6.8241%" y="431.50"></text></g><g><title>__GI__IO_putc (1 samples, 0.21%)</title><rect x="6.6098%" y="405" width="0.2132%" height="15" fill="rgb(250,92,42)" fg:x="31" fg:w="1"/><text x="6.8241%" y="415.50"></text></g><g><title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy (1 samples, 0.21%)</title><rect x="6.8230%" y="421" width="0.2132%" height="15" fill="rgb(247,142,45)" fg:x="32" fg:w="1"/><text x="7.0373%" y="431.50"></text></g><g><title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.43%)</title><rect x="6.8230%" y="437" width="0.4264%" height="15" fill="rgb(226,32,40)" fg:x="32" fg:w="2"/><text x="7.0373%" y="447.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (1 samples, 0.21%)</title><rect x="7.0362%" y="421" width="0.2132%" height="15" fill="rgb(209,28,51)" fg:x="33" fg:w="1"/><text x="7.2505%" y="431.50"></text></g><g><title>Log::write (7 samples, 1.49%)</title><rect x="5.9701%" y="453" width="1.4925%" height="15" fill="rgb(230,27,54)" fg:x="28" fg:w="7"/><text x="6.1844%" y="463.50"></text></g><g><title>std::ostream::flush (1 samples, 0.21%)</title><rect x="7.2495%" y="437" width="0.2132%" height="15" fill="rgb(232,177,40)" fg:x="34" fg:w="1"/><text x="7.4638%" y="447.50"></text></g><g><title>__GI__IO_fflush (1 samples, 0.21%)</title><rect x="7.2495%" y="421" width="0.2132%" height="15" fill="rgb(244,47,3)" fg:x="34" fg:w="1"/><text x="7.4638%" y="431.50"></text></g><g><title>_IO_new_file_sync (1 samples, 0.21%)</title><rect x="7.2495%" y="405" width="0.2132%" height="15" fill="rgb(241,169,52)" fg:x="34" fg:w="1"/><text x="7.4638%" y="415.50"></text></g><g><title>Request::getHeader (1 samples, 0.21%)</title><rect x="7.4627%" y="453" width="0.2132%" height="15" fill="rgb(238,121,14)" fg:x="35" fg:w="1"/><text x="7.6770%" y="463.50"></text></g><g><title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.21%)</title><rect x="7.4627%" y="437" width="0.2132%" height="15" fill="rgb(236,155,54)" fg:x="35" fg:w="1"/><text x="7.6770%" y="447.50"></text></g><g><title> (1 samples, 0.21%)</title><rect x="7.4627%" y="421" width="0.2132%" height="15" fill="rgb(223,113,14)" fg:x="35" fg:w="1"/><text x="7.6770%" y="431.50"></text></g><g><title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_valptr (1 samples, 0.21%)</title><rect x="7.4627%" y="405" width="0.2132%" height="15" fill="rgb(223,36,30)" fg:x="35" fg:w="1"/><text x="7.6770%" y="415.50"></text></g><g><title>std::__addressof&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const&gt; (1 samples, 0.21%)</title><rect x="7.4627%" y="389" width="0.2132%" height="15" fill="rgb(241,21,50)" fg:x="35" fg:w="1"/><text x="7.6770%" y="399.50"></text></g><g><title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.21%)</title><rect x="7.6759%" y="437" width="0.2132%" height="15" fill="rgb(211,221,44)" fg:x="36" fg:w="1"/><text x="7.8902%" y="447.50"></text></g><g><title> (1 samples, 0.21%)</title><rect x="7.6759%" y="421" width="0.2132%" height="15" fill="rgb(223,113,14)" fg:x="36" fg:w="1"/><text x="7.8902%" y="431.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (1 samples, 0.21%)</title><rect x="7.8891%" y="437" width="0.2132%" height="15" fill="rgb(247,126,12)" fg:x="37" fg:w="1"/><text x="8.1034%" y="447.50"></text></g><g><title>[libstdc++.so.6.0.30] (1 samples, 0.21%)</title><rect x="7.8891%" y="421" width="0.2132%" height="15" fill="rgb(231,140,31)" fg:x="37" fg:w="1"/><text x="8.1034%" y="431.50"></text></g><g><title>Response::generateHead[abi:cxx11] (4 samples, 0.85%)</title><rect x="7.6759%" y="453" width="0.8529%" height="15" fill="rgb(210,158,47)" fg:x="36" fg:w="4"/><text x="7.8902%" y="463.50"></text></g><g><title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.43%)</title><rect x="8.1023%" y="437" width="0.4264%" height="15" fill="rgb(226,32,40)" fg:x="38" fg:w="2"/><text x="8.3166%" y="447.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1 samples, 0.21%)</title><rect x="8.3156%" y="421" width="0.2132%" height="15" fill="rgb(216,50,33)" fg:x="39" fg:w="1"/><text x="8.5299%" y="431.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.21%)</title><rect x="8.3156%" y="405" width="0.2132%" height="15" fill="rgb(250,46,35)" fg:x="39" fg:w="1"/><text x="8.5299%" y="415.50"></text></g><g><title>__GI___libc_free (1 samples, 0.21%)</title><rect x="8.3156%" y="389" width="0.2132%" height="15" fill="rgb(247,8,17)" fg:x="39" fg:w="1"/><text x="8.5299%" y="399.50"></text></g><g><title>_int_free (1 samples, 0.21%)</title><rect x="8.3156%" y="373" width="0.2132%" height="15" fill="rgb(221,113,48)" fg:x="39" fg:w="1"/><text x="8.5299%" y="383.50"></text></g><g><title>Response::setHeader (2 samples, 0.43%)</title><rect x="8.5288%" y="453" width="0.4264%" height="15" fill="rgb(253,98,0)" fg:x="40" fg:w="2"/><text x="8.7431%" y="463.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (2 samples, 0.43%)</title><rect x="8.5288%" y="437" width="0.4264%" height="15" fill="rgb(213,223,15)" fg:x="40" fg:w="2"/><text x="8.7431%" y="447.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::insert (2 samples, 0.43%)</title><rect x="8.5288%" y="421" width="0.4264%" height="15" fill="rgb(253,1,32)" fg:x="40" fg:w="2"/><text x="8.7431%" y="431.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_insert_unique_ (2 samples, 0.43%)</title><rect x="8.5288%" y="405" width="0.4264%" height="15" fill="rgb(229,182,52)" fg:x="40" fg:w="2"/><text x="8.7431%" y="415.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_insert_unique_&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (2 samples, 0.43%)</title><rect x="8.5288%" y="389" width="0.4264%" height="15" fill="rgb(227,197,36)" fg:x="40" fg:w="2"/><text x="8.7431%" y="399.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_get_insert_hint_unique_pos (2 samples, 0.43%)</title><rect x="8.5288%" y="373" width="0.4264%" height="15" fill="rgb(206,139,2)" fg:x="40" fg:w="2"/><text x="8.7431%" y="383.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_leftmost (1 samples, 0.21%)</title><rect x="8.7420%" y="357" width="0.2132%" height="15" fill="rgb(205,74,29)" fg:x="41" fg:w="1"/><text x="8.9563%" y="367.50"></text></g><g><title>getTime (1 samples, 0.21%)</title><rect x="8.9552%" y="453" width="0.2132%" height="15" fill="rgb(245,134,19)" fg:x="42" fg:w="1"/><text x="9.1695%" y="463.50"></text></g><g><title>__GI___strftime_l (1 samples, 0.21%)</title><rect x="8.9552%" y="437" width="0.2132%" height="15" fill="rgb(252,21,16)" fg:x="42" fg:w="1"/><text x="9.1695%" y="447.50"></text></g><g><title>__strftime_internal (1 samples, 0.21%)</title><rect x="8.9552%" y="421" width="0.2132%" height="15" fill="rgb(239,20,42)" fg:x="42" fg:w="1"/><text x="9.1695%" y="431.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (1 samples, 0.21%)</title><rect x="9.1684%" y="437" width="0.2132%" height="15" fill="rgb(223,206,25)" fg:x="43" fg:w="1"/><text x="9.3827%" y="447.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (1 samples, 0.21%)</title><rect x="9.1684%" y="421" width="0.2132%" height="15" fill="rgb(237,227,49)" fg:x="43" fg:w="1"/><text x="9.3827%" y="431.50"></text></g><g><title>std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_istringstream (2 samples, 0.43%)</title><rect x="9.1684%" y="453" width="0.4264%" height="15" fill="rgb(252,210,43)" fg:x="43" fg:w="2"/><text x="9.3827%" y="463.50"></text></g><g><title>std::ios_base::ios_base (1 samples, 0.21%)</title><rect x="9.3817%" y="437" width="0.2132%" height="15" fill="rgb(227,77,35)" fg:x="44" fg:w="1"/><text x="9.5959%" y="447.50"></text></g><g><title>Http::sendResponse (19 samples, 4.05%)</title><rect x="5.7569%" y="469" width="4.0512%" height="15" fill="rgb(226,37,44)" fg:x="27" fg:w="19"/><text x="5.9712%" y="479.50">Http::..</text></g><g><title>std::allocator&lt;char&gt;::~allocator (1 samples, 0.21%)</title><rect x="9.5949%" y="453" width="0.2132%" height="15" fill="rgb(235,61,44)" fg:x="45" fg:w="1"/><text x="9.8092%" y="463.50"></text></g><g><title>Request::getHeader (2 samples, 0.43%)</title><rect x="9.8081%" y="469" width="0.4264%" height="15" fill="rgb(238,121,14)" fg:x="46" fg:w="2"/><text x="10.0224%" y="479.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (2 samples, 0.43%)</title><rect x="9.8081%" y="453" width="0.4264%" height="15" fill="rgb(251,39,6)" fg:x="46" fg:w="2"/><text x="10.0224%" y="463.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (2 samples, 0.43%)</title><rect x="9.8081%" y="437" width="0.4264%" height="15" fill="rgb(215,30,0)" fg:x="46" fg:w="2"/><text x="10.0224%" y="447.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_lower_bound (1 samples, 0.21%)</title><rect x="10.0213%" y="421" width="0.2132%" height="15" fill="rgb(243,60,52)" fg:x="47" fg:w="1"/><text x="10.2356%" y="431.50"></text></g><g><title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1 samples, 0.21%)</title><rect x="10.0213%" y="405" width="0.2132%" height="15" fill="rgb(228,56,32)" fg:x="47" fg:w="1"/><text x="10.2356%" y="415.50"></text></g><g><title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.21%)</title><rect x="10.0213%" y="389" width="0.2132%" height="15" fill="rgb(241,103,2)" fg:x="47" fg:w="1"/><text x="10.2356%" y="399.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1 samples, 0.21%)</title><rect x="10.0213%" y="373" width="0.2132%" height="15" fill="rgb(212,2,49)" fg:x="47" fg:w="1"/><text x="10.2356%" y="383.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (1 samples, 0.21%)</title><rect x="10.4478%" y="421" width="0.2132%" height="15" fill="rgb(251,39,6)" fg:x="49" fg:w="1"/><text x="10.6620%" y="431.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (1 samples, 0.21%)</title><rect x="10.4478%" y="405" width="0.2132%" height="15" fill="rgb(215,30,0)" fg:x="49" fg:w="1"/><text x="10.6620%" y="415.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_lower_bound (1 samples, 0.21%)</title><rect x="10.4478%" y="389" width="0.2132%" height="15" fill="rgb(243,60,52)" fg:x="49" fg:w="1"/><text x="10.6620%" y="399.50"></text></g><g><title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1 samples, 0.21%)</title><rect x="10.4478%" y="373" width="0.2132%" height="15" fill="rgb(228,56,32)" fg:x="49" fg:w="1"/><text x="10.6620%" y="383.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (1 samples, 0.21%)</title><rect x="10.6610%" y="421" width="0.2132%" height="15" fill="rgb(213,223,15)" fg:x="50" fg:w="1"/><text x="10.8753%" y="431.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::insert (1 samples, 0.21%)</title><rect x="10.6610%" y="405" width="0.2132%" height="15" fill="rgb(253,1,32)" fg:x="50" fg:w="1"/><text x="10.8753%" y="415.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_insert_unique_ (1 samples, 0.21%)</title><rect x="10.6610%" y="389" width="0.2132%" height="15" fill="rgb(229,182,52)" fg:x="50" fg:w="1"/><text x="10.8753%" y="399.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_insert_unique_&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (1 samples, 0.21%)</title><rect x="10.6610%" y="373" width="0.2132%" height="15" fill="rgb(227,197,36)" fg:x="50" fg:w="1"/><text x="10.8753%" y="383.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_insert_&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (1 samples, 0.21%)</title><rect x="10.6610%" y="357" width="0.2132%" height="15" fill="rgb(210,214,38)" fg:x="50" fg:w="1"/><text x="10.8753%" y="367.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (1 samples, 0.21%)</title><rect x="10.6610%" y="341" width="0.2132%" height="15" fill="rgb(216,64,20)" fg:x="50" fg:w="1"/><text x="10.8753%" y="351.50"></text></g><g><title>std::transform&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, int (*)(int)&gt; (1 samples, 0.21%)</title><rect x="10.8742%" y="421" width="0.2132%" height="15" fill="rgb(232,139,18)" fg:x="51" fg:w="1"/><text x="11.0885%" y="431.50"></text></g><g><title>__GI_tolower (1 samples, 0.21%)</title><rect x="10.8742%" y="405" width="0.2132%" height="15" fill="rgb(219,179,12)" fg:x="51" fg:w="1"/><text x="11.0885%" y="415.50"></text></g><g><title>Request::parseHeader (6 samples, 1.28%)</title><rect x="10.2345%" y="453" width="1.2793%" height="15" fill="rgb(217,141,20)" fg:x="48" fg:w="6"/><text x="10.4488%" y="463.50"></text></g><g><title>Request::setHeader (5 samples, 1.07%)</title><rect x="10.4478%" y="437" width="1.0661%" height="15" fill="rgb(246,210,30)" fg:x="49" fg:w="5"/><text x="10.6620%" y="447.50"></text></g><g><title>trimStart (2 samples, 0.43%)</title><rect x="11.0874%" y="421" width="0.4264%" height="15" fill="rgb(251,136,50)" fg:x="52" fg:w="2"/><text x="11.3017%" y="431.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::erase (2 samples, 0.43%)</title><rect x="11.0874%" y="405" width="0.4264%" height="15" fill="rgb(226,31,7)" fg:x="52" fg:w="2"/><text x="11.3017%" y="415.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_erase (1 samples, 0.21%)</title><rect x="11.3006%" y="389" width="0.2132%" height="15" fill="rgb(230,127,2)" fg:x="53" fg:w="1"/><text x="11.5149%" y="399.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find_first_of (1 samples, 0.21%)</title><rect x="11.5139%" y="437" width="0.2132%" height="15" fill="rgb(212,119,18)" fg:x="54" fg:w="1"/><text x="11.7281%" y="447.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::substr (1 samples, 0.21%)</title><rect x="11.7271%" y="437" width="0.2132%" height="15" fill="rgb(237,70,52)" fg:x="55" fg:w="1"/><text x="11.9414%" y="447.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.21%)</title><rect x="11.7271%" y="421" width="0.2132%" height="15" fill="rgb(240,176,52)" fg:x="55" fg:w="1"/><text x="11.9414%" y="431.50"></text></g><g><title>operator new (1 samples, 0.21%)</title><rect x="11.7271%" y="405" width="0.2132%" height="15" fill="rgb(214,91,1)" fg:x="55" fg:w="1"/><text x="11.9414%" y="415.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.21%)</title><rect x="11.7271%" y="389" width="0.2132%" height="15" fill="rgb(206,112,53)" fg:x="55" fg:w="1"/><text x="11.9414%" y="399.50"></text></g><g><title>tcache_get (1 samples, 0.21%)</title><rect x="11.7271%" y="373" width="0.2132%" height="15" fill="rgb(227,126,51)" fg:x="55" fg:w="1"/><text x="11.9414%" y="383.50"></text></g><g><title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.21%)</title><rect x="11.9403%" y="405" width="0.2132%" height="15" fill="rgb(227,63,0)" fg:x="56" fg:w="1"/><text x="12.1546%" y="415.50"></text></g><g><title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (1 samples, 0.21%)</title><rect x="11.9403%" y="389" width="0.2132%" height="15" fill="rgb(209,37,3)" fg:x="56" fg:w="1"/><text x="12.1546%" y="399.50"></text></g><g><title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (1 samples, 0.21%)</title><rect x="11.9403%" y="373" width="0.2132%" height="15" fill="rgb(239,105,25)" fg:x="56" fg:w="1"/><text x="12.1546%" y="383.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_get_Tp_allocator (1 samples, 0.21%)</title><rect x="12.1535%" y="405" width="0.2132%" height="15" fill="rgb(221,162,1)" fg:x="57" fg:w="1"/><text x="12.3678%" y="415.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert (3 samples, 0.64%)</title><rect x="11.9403%" y="421" width="0.6397%" height="15" fill="rgb(232,153,51)" fg:x="56" fg:w="3"/><text x="12.1546%" y="431.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_check_len (1 samples, 0.21%)</title><rect x="12.3667%" y="405" width="0.2132%" height="15" fill="rgb(222,5,51)" fg:x="58" fg:w="1"/><text x="12.5810%" y="415.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::max_size (1 samples, 0.21%)</title><rect x="12.3667%" y="389" width="0.2132%" height="15" fill="rgb(229,204,43)" fg:x="58" fg:w="1"/><text x="12.5810%" y="399.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_max_size (1 samples, 0.21%)</title><rect x="12.3667%" y="373" width="0.2132%" height="15" fill="rgb(211,88,54)" fg:x="58" fg:w="1"/><text x="12.5810%" y="383.50"></text></g><g><title>std::min&lt;unsigned long&gt; (1 samples, 0.21%)</title><rect x="12.3667%" y="357" width="0.2132%" height="15" fill="rgb(243,137,43)" fg:x="58" fg:w="1"/><text x="12.5810%" y="367.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (4 samples, 0.85%)</title><rect x="11.9403%" y="437" width="0.8529%" height="15" fill="rgb(228,192,54)" fg:x="56" fg:w="4"/><text x="12.1546%" y="447.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::end (1 samples, 0.21%)</title><rect x="12.5800%" y="421" width="0.2132%" height="15" fill="rgb(229,111,34)" fg:x="59" fg:w="1"/><text x="12.7942%" y="431.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::__normal_iterator (1 samples, 0.21%)</title><rect x="12.5800%" y="405" width="0.2132%" height="15" fill="rgb(243,58,5)" fg:x="59" fg:w="1"/><text x="12.7942%" y="415.50"></text></g><g><title>Request::parseHead (13 samples, 2.77%)</title><rect x="10.2345%" y="469" width="2.7719%" height="15" fill="rgb(235,106,14)" fg:x="48" fg:w="13"/><text x="10.4488%" y="479.50">Req..</text></g><g><title>split (7 samples, 1.49%)</title><rect x="11.5139%" y="453" width="1.4925%" height="15" fill="rgb(229,86,52)" fg:x="54" fg:w="7"/><text x="11.7281%" y="463.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (1 samples, 0.21%)</title><rect x="12.7932%" y="437" width="0.2132%" height="15" fill="rgb(238,104,0)" fg:x="60" fg:w="1"/><text x="13.0075%" y="447.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_base (1 samples, 0.21%)</title><rect x="12.7932%" y="421" width="0.2132%" height="15" fill="rgb(225,180,26)" fg:x="60" fg:w="1"/><text x="13.0075%" y="431.50"></text></g><g><title>Uri::generate[abi:cxx11] (1 samples, 0.21%)</title><rect x="13.0064%" y="469" width="0.2132%" height="15" fill="rgb(254,59,54)" fg:x="61" fg:w="1"/><text x="13.2207%" y="479.50"></text></g><g><title>std::operator!=&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.21%)</title><rect x="13.0064%" y="453" width="0.2132%" height="15" fill="rgb(221,23,49)" fg:x="61" fg:w="1"/><text x="13.2207%" y="463.50"></text></g><g><title>std::operator==&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.21%)</title><rect x="13.0064%" y="437" width="0.2132%" height="15" fill="rgb(214,68,17)" fg:x="61" fg:w="1"/><text x="13.2207%" y="447.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1 samples, 0.21%)</title><rect x="13.0064%" y="421" width="0.2132%" height="15" fill="rgb(212,2,49)" fg:x="61" fg:w="1"/><text x="13.2207%" y="431.50"></text></g><g><title>Address::operator== (1 samples, 0.21%)</title><rect x="13.2196%" y="453" width="0.2132%" height="15" fill="rgb(246,87,5)" fg:x="62" fg:w="1"/><text x="13.4339%" y="463.50"></text></g><g><title>Context::exists (1 samples, 0.21%)</title><rect x="13.4328%" y="453" width="0.2132%" height="15" fill="rgb(247,57,9)" fg:x="63" fg:w="1"/><text x="13.6471%" y="463.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_begin (1 samples, 0.21%)</title><rect x="13.6461%" y="389" width="0.2132%" height="15" fill="rgb(249,221,0)" fg:x="64" fg:w="1"/><text x="13.8603%" y="399.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_mbegin (1 samples, 0.21%)</title><rect x="13.6461%" y="373" width="0.2132%" height="15" fill="rgb(241,78,33)" fg:x="64" fg:w="1"/><text x="13.8603%" y="383.50"></text></g><g><title>Context::getDirective (2 samples, 0.43%)</title><rect x="13.6461%" y="453" width="0.4264%" height="15" fill="rgb(251,123,38)" fg:x="64" fg:w="2"/><text x="13.8603%" y="463.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::operator[] (2 samples, 0.43%)</title><rect x="13.6461%" y="437" width="0.4264%" height="15" fill="rgb(241,90,24)" fg:x="64" fg:w="2"/><text x="13.8603%" y="447.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::lower_bound (2 samples, 0.43%)</title><rect x="13.6461%" y="421" width="0.4264%" height="15" fill="rgb(236,33,33)" fg:x="64" fg:w="2"/><text x="13.8603%" y="431.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::lower_bound (2 samples, 0.43%)</title><rect x="13.6461%" y="405" width="0.4264%" height="15" fill="rgb(234,73,1)" fg:x="64" fg:w="2"/><text x="13.8603%" y="415.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_lower_bound (1 samples, 0.21%)</title><rect x="13.8593%" y="389" width="0.2132%" height="15" fill="rgb(237,13,3)" fg:x="65" fg:w="1"/><text x="14.0736%" y="399.50"></text></g><g><title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1 samples, 0.21%)</title><rect x="13.8593%" y="373" width="0.2132%" height="15" fill="rgb(228,56,32)" fg:x="65" fg:w="1"/><text x="14.0736%" y="383.50"></text></g><g><title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.21%)</title><rect x="13.8593%" y="357" width="0.2132%" height="15" fill="rgb(241,103,2)" fg:x="65" fg:w="1"/><text x="14.0736%" y="367.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1 samples, 0.21%)</title><rect x="13.8593%" y="341" width="0.2132%" height="15" fill="rgb(212,2,49)" fg:x="65" fg:w="1"/><text x="14.0736%" y="351.50"></text></g><g><title>std::_Rb_tree_const_iterator&lt;Address&gt;::operator++ (1 samples, 0.21%)</title><rect x="14.0725%" y="453" width="0.2132%" height="15" fill="rgb(217,217,31)" fg:x="66" fg:w="1"/><text x="14.2868%" y="463.50"></text></g><g><title>std::_Rb_tree_increment (1 samples, 0.21%)</title><rect x="14.0725%" y="437" width="0.2132%" height="15" fill="rgb(205,67,33)" fg:x="66" fg:w="1"/><text x="14.2868%" y="447.50"></text></g><g><title>VirtualHost::matchVirtualHost (6 samples, 1.28%)</title><rect x="13.2196%" y="469" width="1.2793%" height="15" fill="rgb(209,165,38)" fg:x="62" fg:w="6"/><text x="13.4339%" y="479.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (1 samples, 0.21%)</title><rect x="14.2857%" y="453" width="0.2132%" height="15" fill="rgb(250,109,37)" fg:x="67" fg:w="1"/><text x="14.5000%" y="463.50"></text></g><g><title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.21%)</title><rect x="14.2857%" y="437" width="0.2132%" height="15" fill="rgb(227,63,0)" fg:x="67" fg:w="1"/><text x="14.5000%" y="447.50"></text></g><g><title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (1 samples, 0.21%)</title><rect x="14.2857%" y="421" width="0.2132%" height="15" fill="rgb(209,37,3)" fg:x="67" fg:w="1"/><text x="14.5000%" y="431.50"></text></g><g><title>__GI___libc_free (1 samples, 0.21%)</title><rect x="14.4989%" y="469" width="0.2132%" height="15" fill="rgb(247,8,17)" fg:x="68" fg:w="1"/><text x="14.7132%" y="479.50"></text></g><g><title>_int_free (1 samples, 0.21%)</title><rect x="14.4989%" y="453" width="0.2132%" height="15" fill="rgb(221,113,48)" fg:x="68" fg:w="1"/><text x="14.7132%" y="463.50"></text></g><g><title>Address::port (1 samples, 0.21%)</title><rect x="14.7122%" y="437" width="0.2132%" height="15" fill="rgb(212,229,12)" fg:x="69" fg:w="1"/><text x="14.9264%" y="447.50"></text></g><g><title>htons (1 samples, 0.21%)</title><rect x="14.7122%" y="421" width="0.2132%" height="15" fill="rgb(216,5,52)" fg:x="69" fg:w="1"/><text x="14.9264%" y="431.50"></text></g><g><title>__bswap_16 (1 samples, 0.21%)</title><rect x="14.7122%" y="405" width="0.2132%" height="15" fill="rgb(251,159,7)" fg:x="69" fg:w="1"/><text x="14.9264%" y="415.50"></text></g><g><title>_IO_no_init (1 samples, 0.21%)</title><rect x="14.9254%" y="373" width="0.2132%" height="15" fill="rgb(207,0,12)" fg:x="70" fg:w="1"/><text x="15.1397%" y="383.50"></text></g><g><title>__find_specmb (2 samples, 0.43%)</title><rect x="15.3518%" y="357" width="0.4264%" height="15" fill="rgb(241,168,31)" fg:x="72" fg:w="2"/><text x="15.5661%" y="367.50"></text></g><g><title>__strchrnul_avx2 (2 samples, 0.43%)</title><rect x="15.3518%" y="341" width="0.4264%" height="15" fill="rgb(248,143,36)" fg:x="72" fg:w="2"/><text x="15.5661%" y="351.50"></text></g><g><title>_itoa_word (1 samples, 0.21%)</title><rect x="15.7783%" y="357" width="0.2132%" height="15" fill="rgb(226,42,22)" fg:x="74" fg:w="1"/><text x="15.9925%" y="367.50"></text></g><g><title>__GI_inet_ntop (6 samples, 1.28%)</title><rect x="14.9254%" y="437" width="1.2793%" height="15" fill="rgb(238,161,7)" fg:x="70" fg:w="6"/><text x="15.1397%" y="447.50"></text></g><g><title>inet_ntop4 (6 samples, 1.28%)</title><rect x="14.9254%" y="421" width="1.2793%" height="15" fill="rgb(227,201,18)" fg:x="70" fg:w="6"/><text x="15.1397%" y="431.50"></text></g><g><title>__sprintf (6 samples, 1.28%)</title><rect x="14.9254%" y="405" width="1.2793%" height="15" fill="rgb(235,219,35)" fg:x="70" fg:w="6"/><text x="15.1397%" y="415.50"></text></g><g><title>__vsprintf_internal (6 samples, 1.28%)</title><rect x="14.9254%" y="389" width="1.2793%" height="15" fill="rgb(236,168,18)" fg:x="70" fg:w="6"/><text x="15.1397%" y="399.50"></text></g><g><title>__vfprintf_internal (5 samples, 1.07%)</title><rect x="15.1386%" y="373" width="1.0661%" height="15" fill="rgb(246,29,23)" fg:x="71" fg:w="5"/><text x="15.3529%" y="383.50"></text></g><g><title>outstring_func (1 samples, 0.21%)</title><rect x="15.9915%" y="357" width="0.2132%" height="15" fill="rgb(214,217,18)" fg:x="75" fg:w="1"/><text x="16.2058%" y="367.50"></text></g><g><title>__GI__IO_default_xsputn (1 samples, 0.21%)</title><rect x="15.9915%" y="341" width="0.2132%" height="15" fill="rgb(222,196,23)" fg:x="75" fg:w="1"/><text x="16.2058%" y="351.50"></text></g><g><title>std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt; (1 samples, 0.21%)</title><rect x="16.2047%" y="437" width="0.2132%" height="15" fill="rgb(221,154,13)" fg:x="76" fg:w="1"/><text x="16.4190%" y="447.50"></text></g><g><title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.21%)</title><rect x="16.2047%" y="421" width="0.2132%" height="15" fill="rgb(222,170,8)" fg:x="76" fg:w="1"/><text x="16.4190%" y="431.50"></text></g><g><title>operator&lt;&lt; (9 samples, 1.92%)</title><rect x="14.7122%" y="453" width="1.9190%" height="15" fill="rgb(206,204,30)" fg:x="69" fg:w="9"/><text x="14.9264%" y="463.50">o..</text></g><g><title>std::ostream::_M_insert&lt;unsigned long&gt; (1 samples, 0.21%)</title><rect x="16.4179%" y="437" width="0.2132%" height="15" fill="rgb(226,22,13)" fg:x="77" fg:w="1"/><text x="16.6322%" y="447.50"></text></g><g><title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;unsigned long&gt; (1 samples, 0.21%)</title><rect x="16.4179%" y="421" width="0.2132%" height="15" fill="rgb(244,144,25)" fg:x="77" fg:w="1"/><text x="16.6322%" y="431.50"></text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1 samples, 0.21%)</title><rect x="16.4179%" y="405" width="0.2132%" height="15" fill="rgb(213,123,36)" fg:x="77" fg:w="1"/><text x="16.6322%" y="415.50"></text></g><g><title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.21%)</title><rect x="16.6311%" y="405" width="0.2132%" height="15" fill="rgb(215,60,9)" fg:x="78" fg:w="1"/><text x="16.8454%" y="415.50"></text></g><g><title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.21%)</title><rect x="16.8443%" y="405" width="0.2132%" height="15" fill="rgb(214,68,44)" fg:x="79" fg:w="1"/><text x="17.0586%" y="415.50"></text></g><g><title>std::locale::id::_M_id (1 samples, 0.21%)</title><rect x="16.8443%" y="389" width="0.2132%" height="15" fill="rgb(241,7,48)" fg:x="79" fg:w="1"/><text x="17.0586%" y="399.50"></text></g><g><title>Http::OnHeadRecv (79 samples, 16.84%)</title><rect x="0.4264%" y="485" width="16.8443%" height="15" fill="rgb(217,223,8)" fg:x="2" fg:w="79"/><text x="0.6407%" y="495.50">Http::OnHeadRecv</text></g><g><title>toString&lt;Address&amp;&gt; (12 samples, 2.56%)</title><rect x="14.7122%" y="469" width="2.5586%" height="15" fill="rgb(233,146,38)" fg:x="69" fg:w="12"/><text x="14.9264%" y="479.50">toS..</text></g><g><title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream (3 samples, 0.64%)</title><rect x="16.6311%" y="453" width="0.6397%" height="15" fill="rgb(230,13,26)" fg:x="78" fg:w="3"/><text x="16.8454%" y="463.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (3 samples, 0.64%)</title><rect x="16.6311%" y="437" width="0.6397%" height="15" fill="rgb(223,206,25)" fg:x="78" fg:w="3"/><text x="16.8454%" y="447.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (3 samples, 0.64%)</title><rect x="16.6311%" y="421" width="0.6397%" height="15" fill="rgb(237,227,49)" fg:x="78" fg:w="3"/><text x="16.8454%" y="431.50"></text></g><g><title>std::use_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.21%)</title><rect x="17.0576%" y="405" width="0.2132%" height="15" fill="rgb(227,16,42)" fg:x="80" fg:w="1"/><text x="17.2719%" y="415.50"></text></g><g><title>std::locale::id::_M_id (1 samples, 0.21%)</title><rect x="17.0576%" y="389" width="0.2132%" height="15" fill="rgb(241,7,48)" fg:x="80" fg:w="1"/><text x="17.2719%" y="399.50"></text></g><g><title>AConnection::passReadBuffer (80 samples, 17.06%)</title><rect x="0.4264%" y="501" width="17.0576%" height="15" fill="rgb(214,198,32)" fg:x="2" fg:w="80"/><text x="0.6407%" y="511.50">AConnection::passReadBuffer</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::substr (1 samples, 0.21%)</title><rect x="17.2708%" y="485" width="0.2132%" height="15" fill="rgb(237,70,52)" fg:x="81" fg:w="1"/><text x="17.4851%" y="495.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.21%)</title><rect x="17.2708%" y="469" width="0.2132%" height="15" fill="rgb(240,176,52)" fg:x="81" fg:w="1"/><text x="17.4851%" y="479.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;char*&gt; (2 samples, 0.43%)</title><rect x="17.4840%" y="501" width="0.4264%" height="15" fill="rgb(217,84,11)" fg:x="82" fg:w="2"/><text x="17.6983%" y="511.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (2 samples, 0.43%)</title><rect x="17.4840%" y="485" width="0.4264%" height="15" fill="rgb(254,182,12)" fg:x="82" fg:w="2"/><text x="17.6983%" y="495.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (1 samples, 0.21%)</title><rect x="17.6972%" y="469" width="0.2132%" height="15" fill="rgb(241,200,23)" fg:x="83" fg:w="1"/><text x="17.9115%" y="479.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.21%)</title><rect x="17.6972%" y="453" width="0.2132%" height="15" fill="rgb(254,182,12)" fg:x="83" fg:w="1"/><text x="17.9115%" y="463.50"></text></g><g><title>operator new (1 samples, 0.21%)</title><rect x="17.6972%" y="437" width="0.2132%" height="15" fill="rgb(214,91,1)" fg:x="83" fg:w="1"/><text x="17.9115%" y="447.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.21%)</title><rect x="17.6972%" y="421" width="0.2132%" height="15" fill="rgb(206,112,53)" fg:x="83" fg:w="1"/><text x="17.9115%" y="431.50"></text></g><g><title>[unknown] (83 samples, 17.70%)</title><rect x="0.4264%" y="533" width="17.6972%" height="15" fill="rgb(227,28,50)" fg:x="2" fg:w="83"/><text x="0.6407%" y="543.50">[unknown]</text></g><g><title>AConnection::onPollIn (83 samples, 17.70%)</title><rect x="0.4264%" y="517" width="17.6972%" height="15" fill="rgb(238,25,4)" fg:x="2" fg:w="83"/><text x="0.6407%" y="527.50">AConnection::onPollIn</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.21%)</title><rect x="17.9104%" y="501" width="0.2132%" height="15" fill="rgb(216,41,4)" fg:x="84" fg:w="1"/><text x="18.1247%" y="511.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Cache::data_s, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt; &gt; &gt;::begin (17 samples, 3.62%)</title><rect x="20.4691%" y="437" width="3.6247%" height="15" fill="rgb(218,42,53)" fg:x="96" fg:w="17"/><text x="20.6834%" y="447.50">std::..</text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt; &gt; &gt;::begin (16 samples, 3.41%)</title><rect x="20.6823%" y="421" width="3.4115%" height="15" fill="rgb(244,37,52)" fg:x="97" fg:w="16"/><text x="20.8966%" y="431.50">std:..</text></g><g><title>Http::updateCache (26 samples, 5.54%)</title><rect x="19.4030%" y="469" width="5.5437%" height="15" fill="rgb(246,197,10)" fg:x="91" fg:w="26"/><text x="19.6173%" y="479.50">Http::up..</text></g><g><title>Cache::update (25 samples, 5.33%)</title><rect x="19.6162%" y="453" width="5.3305%" height="15" fill="rgb(241,194,37)" fg:x="92" fg:w="25"/><text x="19.8305%" y="463.50">Cache::u..</text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Cache::data_s, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt; &gt; &gt;::end (4 samples, 0.85%)</title><rect x="24.0938%" y="437" width="0.8529%" height="15" fill="rgb(225,164,34)" fg:x="113" fg:w="4"/><text x="24.3081%" y="447.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt; &gt; &gt;::end (3 samples, 0.64%)</title><rect x="24.3070%" y="421" width="0.6397%" height="15" fill="rgb(248,75,9)" fg:x="114" fg:w="3"/><text x="24.5213%" y="431.50"></text></g><g><title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt; &gt;::_Rb_tree_iterator (3 samples, 0.64%)</title><rect x="24.3070%" y="405" width="0.6397%" height="15" fill="rgb(213,40,38)" fg:x="114" fg:w="3"/><text x="24.5213%" y="415.50"></text></g><g><title>Poll::getInstance (1 samples, 0.21%)</title><rect x="28.1450%" y="453" width="0.2132%" height="15" fill="rgb(237,174,43)" fg:x="132" fg:w="1"/><text x="28.3593%" y="463.50"></text></g><g><title>Poll::setTimeout (1 samples, 0.21%)</title><rect x="40.9382%" y="405" width="0.2132%" height="15" fill="rgb(227,76,18)" fg:x="192" fg:w="1"/><text x="41.1525%" y="415.50"></text></g><g><title>__vdso_gettimeofday (6 samples, 1.28%)</title><rect x="41.1514%" y="405" width="1.2793%" height="15" fill="rgb(246,114,18)" fg:x="193" fg:w="6"/><text x="41.3657%" y="415.50"></text></g><g><title>AConnection::onNoPollEvent (15 samples, 3.20%)</title><rect x="40.2985%" y="421" width="3.1983%" height="15" fill="rgb(239,49,17)" fg:x="189" fg:w="15"/><text x="40.5128%" y="431.50">ACon..</text></g><g><title>operator- (5 samples, 1.07%)</title><rect x="42.4307%" y="405" width="1.0661%" height="15" fill="rgb(208,63,48)" fg:x="199" fg:w="5"/><text x="42.6450%" y="415.50"></text></g><g><title>__libc_send (13 samples, 2.77%)</title><rect x="49.0405%" y="405" width="2.7719%" height="15" fill="rgb(249,28,5)" fg:x="230" fg:w="13"/><text x="49.2548%" y="415.50">__l..</text></g><g><title>[libstdc++.so.6.0.30] (1 samples, 0.21%)</title><rect x="52.2388%" y="389" width="0.2132%" height="15" fill="rgb(231,140,31)" fg:x="245" fg:w="1"/><text x="52.4531%" y="399.50"></text></g><g><title>_IO_new_file_close_it (1 samples, 0.21%)</title><rect x="52.4520%" y="341" width="0.2132%" height="15" fill="rgb(231,27,31)" fg:x="246" fg:w="1"/><text x="52.6663%" y="351.50"></text></g><g><title>__GI__IO_file_close (1 samples, 0.21%)</title><rect x="52.4520%" y="325" width="0.2132%" height="15" fill="rgb(243,175,19)" fg:x="246" fg:w="1"/><text x="52.6663%" y="335.50"></text></g><g><title>std::__basic_file&lt;char&gt;::close (2 samples, 0.43%)</title><rect x="52.4520%" y="373" width="0.4264%" height="15" fill="rgb(238,94,30)" fg:x="246" fg:w="2"/><text x="52.6663%" y="383.50"></text></g><g><title>_IO_new_fclose (2 samples, 0.43%)</title><rect x="52.4520%" y="357" width="0.4264%" height="15" fill="rgb(247,20,36)" fg:x="246" fg:w="2"/><text x="52.6663%" y="367.50"></text></g><g><title>__GI__IO_default_finish (1 samples, 0.21%)</title><rect x="52.6652%" y="341" width="0.2132%" height="15" fill="rgb(239,148,43)" fg:x="247" fg:w="1"/><text x="52.8795%" y="351.50"></text></g><g><title>[libstdc++.so.6.0.30] (1 samples, 0.21%)</title><rect x="52.8785%" y="357" width="0.2132%" height="15" fill="rgb(231,140,31)" fg:x="248" fg:w="1"/><text x="53.0928%" y="367.50"></text></g><g><title>std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_ifstream (7 samples, 1.49%)</title><rect x="51.8124%" y="405" width="1.4925%" height="15" fill="rgb(238,137,47)" fg:x="243" fg:w="7"/><text x="52.0267%" y="415.50"></text></g><g><title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (4 samples, 0.85%)</title><rect x="52.4520%" y="389" width="0.8529%" height="15" fill="rgb(209,169,46)" fg:x="246" fg:w="4"/><text x="52.6663%" y="399.50"></text></g><g><title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_destroy_internal_buffer (2 samples, 0.43%)</title><rect x="52.8785%" y="373" width="0.4264%" height="15" fill="rgb(229,92,20)" fg:x="248" fg:w="2"/><text x="53.0928%" y="383.50"></text></g><g><title>operator delete[] (1 samples, 0.21%)</title><rect x="53.0917%" y="357" width="0.2132%" height="15" fill="rgb(237,205,5)" fg:x="249" fg:w="1"/><text x="53.3060%" y="367.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::eof (2 samples, 0.43%)</title><rect x="53.3049%" y="405" width="0.4264%" height="15" fill="rgb(228,109,10)" fg:x="250" fg:w="2"/><text x="53.5192%" y="415.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::fail (5 samples, 1.07%)</title><rect x="53.7313%" y="405" width="1.0661%" height="15" fill="rgb(227,84,25)" fg:x="252" fg:w="5"/><text x="53.9456%" y="415.50"></text></g><g><title>std::istream::gcount (3 samples, 0.64%)</title><rect x="54.7974%" y="405" width="0.6397%" height="15" fill="rgb(237,177,53)" fg:x="257" fg:w="3"/><text x="55.0117%" y="415.50"></text></g><g><title>[libstdc++.so.6.0.30] (3 samples, 0.64%)</title><rect x="61.1940%" y="373" width="0.6397%" height="15" fill="rgb(231,140,31)" fg:x="287" fg:w="3"/><text x="61.4083%" y="383.50"></text></g><g><title>[libstdc++.so.6.0.30] (4 samples, 0.85%)</title><rect x="63.7527%" y="357" width="0.8529%" height="15" fill="rgb(231,140,31)" fg:x="299" fg:w="4"/><text x="63.9670%" y="367.50"></text></g><g><title>__GI___fileno (8 samples, 1.71%)</title><rect x="64.6055%" y="357" width="1.7058%" height="15" fill="rgb(207,47,7)" fg:x="303" fg:w="8"/><text x="64.8198%" y="367.50">_..</text></g><g><title>__GI___libc_read (19 samples, 4.05%)</title><rect x="66.3113%" y="357" width="4.0512%" height="15" fill="rgb(206,204,24)" fg:x="311" fg:w="19"/><text x="66.5256%" y="367.50">__GI__..</text></g><g><title>std::__basic_file&lt;char&gt;::xsgetn (42 samples, 8.96%)</title><rect x="61.8337%" y="373" width="8.9552%" height="15" fill="rgb(236,174,8)" fg:x="290" fg:w="42"/><text x="62.0480%" y="383.50">std::__basic_fi..</text></g><g><title>std::__basic_file&lt;char&gt;::fd (2 samples, 0.43%)</title><rect x="70.3625%" y="357" width="0.4264%" height="15" fill="rgb(229,110,20)" fg:x="330" fg:w="2"/><text x="70.5768%" y="367.50"></text></g><g><title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (67 samples, 14.29%)</title><rect x="58.2090%" y="389" width="14.2857%" height="15" fill="rgb(211,72,33)" fg:x="273" fg:w="67"/><text x="58.4232%" y="399.50">std::basic_filebuf&lt;char, s..</text></g><g><title>std::codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv (8 samples, 1.71%)</title><rect x="70.7889%" y="373" width="1.7058%" height="15" fill="rgb(230,95,20)" fg:x="332" fg:w="8"/><text x="71.0032%" y="383.50">s..</text></g><g><title>std::istream::read (94 samples, 20.04%)</title><rect x="55.4371%" y="405" width="20.0426%" height="15" fill="rgb(248,197,32)" fg:x="260" fg:w="94"/><text x="55.6514%" y="415.50">std::istream::read</text></g><g><title>std::istream::sentry::sentry (14 samples, 2.99%)</title><rect x="72.4947%" y="389" width="2.9851%" height="15" fill="rgb(232,168,44)" fg:x="340" fg:w="14"/><text x="72.7090%" y="399.50">std..</text></g><g><title>std::_Deque_iterator&lt;std::istream*, std::istream*&amp;, std::istream**&gt;::operator* (1 samples, 0.21%)</title><rect x="77.1855%" y="373" width="0.2132%" height="15" fill="rgb(223,62,17)" fg:x="362" fg:w="1"/><text x="77.3998%" y="383.50"></text></g><g><title>AConnection::onPollOut (164 samples, 34.97%)</title><rect x="43.4968%" y="421" width="34.9680%" height="15" fill="rgb(247,1,19)" fg:x="204" fg:w="164"/><text x="43.7111%" y="431.50">AConnection::onPollOut</text></g><g><title>std::queue&lt;std::istream*, std::deque&lt;std::istream*, std::allocator&lt;std::istream*&gt; &gt; &gt;::front (14 samples, 2.99%)</title><rect x="75.4797%" y="405" width="2.9851%" height="15" fill="rgb(228,85,38)" fg:x="354" fg:w="14"/><text x="75.6940%" y="415.50">std..</text></g><g><title>std::deque&lt;std::istream*, std::allocator&lt;std::istream*&gt; &gt;::front (11 samples, 2.35%)</title><rect x="76.1194%" y="389" width="2.3454%" height="15" fill="rgb(205,23,33)" fg:x="357" fg:w="11"/><text x="76.3337%" y="399.50">st..</text></g><g><title>std::deque&lt;std::istream*, std::allocator&lt;std::istream*&gt; &gt;::begin (5 samples, 1.07%)</title><rect x="77.3987%" y="373" width="1.0661%" height="15" fill="rgb(244,184,36)" fg:x="363" fg:w="5"/><text x="77.6130%" y="383.50"></text></g><g><title>std::_Deque_iterator&lt;std::istream*, std::istream*&amp;, std::istream**&gt;::_Deque_iterator (5 samples, 1.07%)</title><rect x="77.3987%" y="357" width="1.0661%" height="15" fill="rgb(229,229,48)" fg:x="363" fg:w="5"/><text x="77.6130%" y="367.50"></text></g><g><title>AConnection::onPollEvent (226 samples, 48.19%)</title><rect x="36.0341%" y="437" width="48.1876%" height="15" fill="rgb(240,200,10)" fg:x="169" fg:w="226"/><text x="36.2484%" y="447.50">AConnection::onPollEvent</text></g><g><title>__vdso_gettimeofday (27 samples, 5.76%)</title><rect x="78.4648%" y="421" width="5.7569%" height="15" fill="rgb(246,114,18)" fg:x="368" fg:w="27"/><text x="78.6791%" y="431.50">__vdso_ge..</text></g><g><title>Address::Address (2 samples, 0.43%)</title><rect x="86.9936%" y="421" width="0.4264%" height="15" fill="rgb(231,26,17)" fg:x="408" fg:w="2"/><text x="87.2079%" y="431.50"></text></g><g><title>Address::~Address (3 samples, 0.64%)</title><rect x="87.4200%" y="421" width="0.6397%" height="15" fill="rgb(211,197,29)" fg:x="410" fg:w="3"/><text x="87.6343%" y="431.50"></text></g><g><title>Log::write (1 samples, 0.21%)</title><rect x="88.0597%" y="405" width="0.2132%" height="15" fill="rgb(230,27,54)" fg:x="413" fg:w="1"/><text x="88.2740%" y="415.50"></text></g><g><title>getTime (1 samples, 0.21%)</title><rect x="88.0597%" y="389" width="0.2132%" height="15" fill="rgb(245,134,19)" fg:x="413" fg:w="1"/><text x="88.2740%" y="399.50"></text></g><g><title>endsWith (1 samples, 0.21%)</title><rect x="88.0597%" y="373" width="0.2132%" height="15" fill="rgb(245,132,52)" fg:x="413" fg:w="1"/><text x="88.2740%" y="383.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.21%)</title><rect x="88.0597%" y="357" width="0.2132%" height="15" fill="rgb(239,29,9)" fg:x="413" fg:w="1"/><text x="88.2740%" y="367.50"></text></g><g><title>_IO_no_init (1 samples, 0.21%)</title><rect x="88.2729%" y="309" width="0.2132%" height="15" fill="rgb(207,0,12)" fg:x="414" fg:w="1"/><text x="88.4872%" y="319.50"></text></g><g><title>operator&lt;&lt; (2 samples, 0.43%)</title><rect x="88.2729%" y="389" width="0.4264%" height="15" fill="rgb(206,204,30)" fg:x="414" fg:w="2"/><text x="88.4872%" y="399.50"></text></g><g><title>__GI_inet_ntop (2 samples, 0.43%)</title><rect x="88.2729%" y="373" width="0.4264%" height="15" fill="rgb(238,161,7)" fg:x="414" fg:w="2"/><text x="88.4872%" y="383.50"></text></g><g><title>inet_ntop4 (2 samples, 0.43%)</title><rect x="88.2729%" y="357" width="0.4264%" height="15" fill="rgb(227,201,18)" fg:x="414" fg:w="2"/><text x="88.4872%" y="367.50"></text></g><g><title>__sprintf (2 samples, 0.43%)</title><rect x="88.2729%" y="341" width="0.4264%" height="15" fill="rgb(235,219,35)" fg:x="414" fg:w="2"/><text x="88.4872%" y="351.50"></text></g><g><title>__vsprintf_internal (2 samples, 0.43%)</title><rect x="88.2729%" y="325" width="0.4264%" height="15" fill="rgb(236,168,18)" fg:x="414" fg:w="2"/><text x="88.4872%" y="335.50"></text></g><g><title>__vfprintf_internal (1 samples, 0.21%)</title><rect x="88.4861%" y="309" width="0.2132%" height="15" fill="rgb(246,29,23)" fg:x="415" fg:w="1"/><text x="88.7004%" y="319.50"></text></g><g><title>__find_specmb (1 samples, 0.21%)</title><rect x="88.4861%" y="293" width="0.2132%" height="15" fill="rgb(241,168,31)" fg:x="415" fg:w="1"/><text x="88.7004%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.21%)</title><rect x="88.4861%" y="277" width="0.2132%" height="15" fill="rgb(253,161,50)" fg:x="415" fg:w="1"/><text x="88.7004%" y="287.50"></text></g><g><title>Http::Http (4 samples, 0.85%)</title><rect x="88.0597%" y="421" width="0.8529%" height="15" fill="rgb(216,154,36)" fg:x="413" fg:w="4"/><text x="88.2740%" y="431.50"></text></g><g><title>toString&lt;Address&amp;&gt; (3 samples, 0.64%)</title><rect x="88.2729%" y="405" width="0.6397%" height="15" fill="rgb(233,146,38)" fg:x="414" fg:w="3"/><text x="88.4872%" y="415.50"></text></g><g><title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringstream (1 samples, 0.21%)</title><rect x="88.6994%" y="389" width="0.2132%" height="15" fill="rgb(221,29,6)" fg:x="416" fg:w="1"/><text x="88.9136%" y="399.50"></text></g><g><title>ListenSocket::onPollEvent (23 samples, 4.90%)</title><rect x="84.2217%" y="437" width="4.9041%" height="15" fill="rgb(234,106,36)" fg:x="395" fg:w="23"/><text x="84.4360%" y="447.50">ListenS..</text></g><g><title>operator new (1 samples, 0.21%)</title><rect x="88.9126%" y="421" width="0.2132%" height="15" fill="rgb(214,91,1)" fg:x="417" fg:w="1"/><text x="89.1269%" y="431.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.21%)</title><rect x="88.9126%" y="405" width="0.2132%" height="15" fill="rgb(206,112,53)" fg:x="417" fg:w="1"/><text x="89.1269%" y="415.50"></text></g><g><title>_int_malloc (1 samples, 0.21%)</title><rect x="88.9126%" y="389" width="0.2132%" height="15" fill="rgb(222,219,51)" fg:x="417" fg:w="1"/><text x="89.1269%" y="399.50"></text></g><g><title>Poll::remove (1 samples, 0.21%)</title><rect x="89.1258%" y="437" width="0.2132%" height="15" fill="rgb(253,87,47)" fg:x="418" fg:w="1"/><text x="89.3401%" y="447.50"></text></g><g><title>Http::~Http (1 samples, 0.21%)</title><rect x="89.1258%" y="421" width="0.2132%" height="15" fill="rgb(211,174,25)" fg:x="418" fg:w="1"/><text x="89.3401%" y="431.50"></text></g><g><title>Http::~Http (1 samples, 0.21%)</title><rect x="89.1258%" y="405" width="0.2132%" height="15" fill="rgb(211,174,25)" fg:x="418" fg:w="1"/><text x="89.3401%" y="415.50"></text></g><g><title>Log::write (1 samples, 0.21%)</title><rect x="89.1258%" y="389" width="0.2132%" height="15" fill="rgb(230,27,54)" fg:x="418" fg:w="1"/><text x="89.3401%" y="399.50"></text></g><g><title>getTime (1 samples, 0.21%)</title><rect x="89.1258%" y="373" width="0.2132%" height="15" fill="rgb(245,134,19)" fg:x="418" fg:w="1"/><text x="89.3401%" y="383.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.21%)</title><rect x="89.1258%" y="357" width="0.2132%" height="15" fill="rgb(244,92,22)" fg:x="418" fg:w="1"/><text x="89.3401%" y="367.50"></text></g><g><title>__strlen_avx2 (1 samples, 0.21%)</title><rect x="89.1258%" y="341" width="0.2132%" height="15" fill="rgb(251,163,19)" fg:x="418" fg:w="1"/><text x="89.3401%" y="351.50"></text></g><g><title>std::vector&lt;IFileDescriptor*, std::allocator&lt;IFileDescriptor*&gt; &gt;::operator[] (3 samples, 0.64%)</title><rect x="89.3390%" y="437" width="0.6397%" height="15" fill="rgb(253,115,3)" fg:x="419" fg:w="3"/><text x="89.5533%" y="447.50"></text></g><g><title>std::vector&lt;IFileDescriptor*, std::allocator&lt;IFileDescriptor*&gt; &gt;::size (3 samples, 0.64%)</title><rect x="89.9787%" y="437" width="0.6397%" height="15" fill="rgb(229,159,38)" fg:x="422" fg:w="3"/><text x="90.1930%" y="447.50"></text></g><g><title>Poll::iterate (309 samples, 65.88%)</title><rect x="28.3582%" y="453" width="65.8849%" height="15" fill="rgb(241,227,18)" fg:x="133" fg:w="309"/><text x="28.5725%" y="463.50">Poll::iterate</text></g><g><title>std::vector&lt;pollfd, std::allocator&lt;pollfd&gt; &gt;::operator[] (17 samples, 3.62%)</title><rect x="90.6183%" y="437" width="3.6247%" height="15" fill="rgb(219,78,45)" fg:x="425" fg:w="17"/><text x="90.8326%" y="447.50">std::..</text></g><g><title>__GI___poll (19 samples, 4.05%)</title><rect x="94.2431%" y="453" width="4.0512%" height="15" fill="rgb(218,57,36)" fg:x="442" fg:w="19"/><text x="94.4574%" y="463.50">__GI__..</text></g><g><title>std::vector&lt;pollfd, std::allocator&lt;pollfd&gt; &gt;::data (2 samples, 0.43%)</title><rect x="98.2942%" y="453" width="0.4264%" height="15" fill="rgb(213,156,9)" fg:x="461" fg:w="2"/><text x="98.5085%" y="463.50"></text></g><g><title>std::vector&lt;pollfd, std::allocator&lt;pollfd&gt; &gt;::_M_data_ptr&lt;pollfd&gt; (1 samples, 0.21%)</title><rect x="98.5075%" y="437" width="0.2132%" height="15" fill="rgb(236,85,54)" fg:x="462" fg:w="1"/><text x="98.7217%" y="447.50"></text></g><g><title>Poll::poll (347 samples, 73.99%)</title><rect x="24.9467%" y="469" width="73.9872%" height="15" fill="rgb(241,47,17)" fg:x="117" fg:w="347"/><text x="25.1610%" y="479.50">Poll::poll</text></g><g><title>std::vector&lt;pollfd, std::allocator&lt;pollfd&gt; &gt;::size (1 samples, 0.21%)</title><rect x="98.7207%" y="453" width="0.2132%" height="15" fill="rgb(240,137,7)" fg:x="463" fg:w="1"/><text x="98.9350%" y="463.50"></text></g><g><title>Config::parseContext (1 samples, 0.21%)</title><rect x="98.9339%" y="421" width="0.2132%" height="15" fill="rgb(250,19,45)" fg:x="464" fg:w="1"/><text x="99.1482%" y="431.50"></text></g><g><title>Config::processInclude (1 samples, 0.21%)</title><rect x="98.9339%" y="405" width="0.2132%" height="15" fill="rgb(213,118,24)" fg:x="464" fg:w="1"/><text x="99.1482%" y="415.50"></text></g><g><title>Config::parseContext (1 samples, 0.21%)</title><rect x="98.9339%" y="389" width="0.2132%" height="15" fill="rgb(250,19,45)" fg:x="464" fg:w="1"/><text x="99.1482%" y="399.50"></text></g><g><title>Config::processContext (1 samples, 0.21%)</title><rect x="98.9339%" y="373" width="0.2132%" height="15" fill="rgb(235,18,8)" fg:x="464" fg:w="1"/><text x="99.1482%" y="383.50"></text></g><g><title>Config::parseContext (1 samples, 0.21%)</title><rect x="98.9339%" y="357" width="0.2132%" height="15" fill="rgb(250,19,45)" fg:x="464" fg:w="1"/><text x="99.1482%" y="367.50"></text></g><g><title>Config::linesUntilPos (1 samples, 0.21%)</title><rect x="98.9339%" y="341" width="0.2132%" height="15" fill="rgb(216,131,20)" fg:x="464" fg:w="1"/><text x="99.1482%" y="351.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find_first_of (1 samples, 0.21%)</title><rect x="98.9339%" y="325" width="0.2132%" height="15" fill="rgb(212,119,18)" fg:x="464" fg:w="1"/><text x="99.1482%" y="335.50"></text></g><g><title>__memchr_avx2 (1 samples, 0.21%)</title><rect x="98.9339%" y="309" width="0.2132%" height="15" fill="rgb(243,72,51)" fg:x="464" fg:w="1"/><text x="99.1482%" y="319.50"></text></g><g><title>_start (381 samples, 81.24%)</title><rect x="18.1237%" y="533" width="81.2367%" height="15" fill="rgb(210,219,27)" fg:x="85" fg:w="381"/><text x="18.3380%" y="543.50">_start</text></g><g><title>__libc_start_main_impl (381 samples, 81.24%)</title><rect x="18.1237%" y="517" width="81.2367%" height="15" fill="rgb(228,214,28)" fg:x="85" fg:w="381"/><text x="18.3380%" y="527.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (381 samples, 81.24%)</title><rect x="18.1237%" y="501" width="81.2367%" height="15" fill="rgb(249,173,1)" fg:x="85" fg:w="381"/><text x="18.3380%" y="511.50">__libc_start_call_main</text></g><g><title>main (381 samples, 81.24%)</title><rect x="18.1237%" y="485" width="81.2367%" height="15" fill="rgb(238,28,47)" fg:x="85" fg:w="381"/><text x="18.3380%" y="495.50">main</text></g><g><title>loadConfig (2 samples, 0.43%)</title><rect x="98.9339%" y="469" width="0.4264%" height="15" fill="rgb(216,190,24)" fg:x="464" fg:w="2"/><text x="99.1482%" y="479.50"></text></g><g><title>Config::parseContext (2 samples, 0.43%)</title><rect x="98.9339%" y="453" width="0.4264%" height="15" fill="rgb(250,19,45)" fg:x="464" fg:w="2"/><text x="99.1482%" y="463.50"></text></g><g><title>Config::processContext (2 samples, 0.43%)</title><rect x="98.9339%" y="437" width="0.4264%" height="15" fill="rgb(235,18,8)" fg:x="464" fg:w="2"/><text x="99.1482%" y="447.50"></text></g><g><title>Context::~Context (1 samples, 0.21%)</title><rect x="99.1471%" y="421" width="0.2132%" height="15" fill="rgb(212,201,48)" fg:x="465" fg:w="1"/><text x="99.3614%" y="431.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;Context, std::allocator&lt;Context&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;Context, std::allocator&lt;Context&gt; &gt; &gt; &gt; &gt;::~map (1 samples, 0.21%)</title><rect x="99.1471%" y="405" width="0.2132%" height="15" fill="rgb(249,13,26)" fg:x="465" fg:w="1"/><text x="99.3614%" y="415.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;Context, std::allocator&lt;Context&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;Context, std::allocator&lt;Context&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;Context, std::allocator&lt;Context&gt; &gt; &gt; &gt; &gt;::~_Rb_tree (1 samples, 0.21%)</title><rect x="99.1471%" y="389" width="0.2132%" height="15" fill="rgb(216,170,24)" fg:x="465" fg:w="1"/><text x="99.3614%" y="399.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;Context, std::allocator&lt;Context&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;Context, std::allocator&lt;Context&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;Context, std::allocator&lt;Context&gt; &gt; &gt; &gt; &gt;::_M_erase (1 samples, 0.21%)</title><rect x="99.1471%" y="373" width="0.2132%" height="15" fill="rgb(243,164,39)" fg:x="465" fg:w="1"/><text x="99.3614%" y="383.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;Context, std::allocator&lt;Context&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;Context, std::allocator&lt;Context&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;Context, std::allocator&lt;Context&gt; &gt; &gt; &gt; &gt;::_M_drop_node (1 samples, 0.21%)</title><rect x="99.1471%" y="357" width="0.2132%" height="15" fill="rgb(236,209,17)" fg:x="465" fg:w="1"/><text x="99.3614%" y="367.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;Context, std::allocator&lt;Context&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;Context, std::allocator&lt;Context&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;Context, std::allocator&lt;Context&gt; &gt; &gt; &gt; &gt;::_M_destroy_node (1 samples, 0.21%)</title><rect x="99.1471%" y="341" width="0.2132%" height="15" fill="rgb(248,130,53)" fg:x="465" fg:w="1"/><text x="99.3614%" y="351.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;Context, std::allocator&lt;Context&gt; &gt; &gt; &gt;::destroy (1 samples, 0.21%)</title><rect x="99.1471%" y="325" width="0.2132%" height="15" fill="rgb(209,211,47)" fg:x="465" fg:w="1"/><text x="99.3614%" y="335.50"></text></g><g><title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;Context, std::allocator&lt;Context&gt; &gt; &gt;::~pair (1 samples, 0.21%)</title><rect x="99.1471%" y="309" width="0.2132%" height="15" fill="rgb(205,183,52)" fg:x="465" fg:w="1"/><text x="99.3614%" y="319.50"></text></g><g><title>std::vector&lt;Context, std::allocator&lt;Context&gt; &gt;::~vector (1 samples, 0.21%)</title><rect x="99.1471%" y="293" width="0.2132%" height="15" fill="rgb(222,173,5)" fg:x="465" fg:w="1"/><text x="99.3614%" y="303.50"></text></g><g><title>std::_Destroy&lt;Context*, Context&gt; (1 samples, 0.21%)</title><rect x="99.1471%" y="277" width="0.2132%" height="15" fill="rgb(246,92,4)" fg:x="465" fg:w="1"/><text x="99.3614%" y="287.50"></text></g><g><title>std::_Destroy&lt;Context*&gt; (1 samples, 0.21%)</title><rect x="99.1471%" y="261" width="0.2132%" height="15" fill="rgb(250,149,2)" fg:x="465" fg:w="1"/><text x="99.3614%" y="271.50"></text></g><g><title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;Context*&gt; (1 samples, 0.21%)</title><rect x="99.1471%" y="245" width="0.2132%" height="15" fill="rgb(234,183,23)" fg:x="465" fg:w="1"/><text x="99.3614%" y="255.50"></text></g><g><title>std::_Destroy&lt;Context&gt; (1 samples, 0.21%)</title><rect x="99.1471%" y="229" width="0.2132%" height="15" fill="rgb(227,128,35)" fg:x="465" fg:w="1"/><text x="99.3614%" y="239.50"></text></g><g><title>Context::~Context (1 samples, 0.21%)</title><rect x="99.1471%" y="213" width="0.2132%" height="15" fill="rgb(212,201,48)" fg:x="465" fg:w="1"/><text x="99.3614%" y="223.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::~map (1 samples, 0.21%)</title><rect x="99.1471%" y="197" width="0.2132%" height="15" fill="rgb(209,174,48)" fg:x="465" fg:w="1"/><text x="99.3614%" y="207.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::~_Rb_tree (1 samples, 0.21%)</title><rect x="99.1471%" y="181" width="0.2132%" height="15" fill="rgb(252,123,43)" fg:x="465" fg:w="1"/><text x="99.3614%" y="191.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (1 samples, 0.21%)</title><rect x="99.1471%" y="165" width="0.2132%" height="15" fill="rgb(221,7,9)" fg:x="465" fg:w="1"/><text x="99.3614%" y="175.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_drop_node (1 samples, 0.21%)</title><rect x="99.1471%" y="149" width="0.2132%" height="15" fill="rgb(218,99,23)" fg:x="465" fg:w="1"/><text x="99.3614%" y="159.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::_M_destroy_node (1 samples, 0.21%)</title><rect x="99.1471%" y="133" width="0.2132%" height="15" fill="rgb(225,19,30)" fg:x="465" fg:w="1"/><text x="99.3614%" y="143.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::destroy (1 samples, 0.21%)</title><rect x="99.1471%" y="117" width="0.2132%" height="15" fill="rgb(216,128,4)" fg:x="465" fg:w="1"/><text x="99.3614%" y="127.50"></text></g><g><title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; &gt;::~pair (1 samples, 0.21%)</title><rect x="99.1471%" y="101" width="0.2132%" height="15" fill="rgb(226,119,47)" fg:x="465" fg:w="1"/><text x="99.3614%" y="111.50"></text></g><g><title>std::vector&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt;::~vector (1 samples, 0.21%)</title><rect x="99.1471%" y="85" width="0.2132%" height="15" fill="rgb(210,163,6)" fg:x="465" fg:w="1"/><text x="99.3614%" y="95.50"></text></g><g><title>std::_Destroy&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.21%)</title><rect x="99.1471%" y="69" width="0.2132%" height="15" fill="rgb(238,58,11)" fg:x="465" fg:w="1"/><text x="99.3614%" y="79.50"></text></g><g><title>std::_Destroy&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*&gt; (1 samples, 0.21%)</title><rect x="99.1471%" y="53" width="0.2132%" height="15" fill="rgb(233,55,36)" fg:x="465" fg:w="1"/><text x="99.3614%" y="63.50"></text></g><g><title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;*&gt; (1 samples, 0.21%)</title><rect x="99.1471%" y="37" width="0.2132%" height="15" fill="rgb(220,141,39)" fg:x="465" fg:w="1"/><text x="99.3614%" y="47.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt; &gt; &gt;::end (1 samples, 0.21%)</title><rect x="99.3603%" y="533" width="0.2132%" height="15" fill="rgb(248,75,9)" fg:x="466" fg:w="1"/><text x="99.5746%" y="543.50"></text></g><g><title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt; &gt;::_Rb_tree_iterator (1 samples, 0.21%)</title><rect x="99.3603%" y="517" width="0.2132%" height="15" fill="rgb(213,40,38)" fg:x="466" fg:w="1"/><text x="99.5746%" y="527.50"></text></g><g><title>std::distance&lt;char*&gt; (1 samples, 0.21%)</title><rect x="99.5736%" y="533" width="0.2132%" height="15" fill="rgb(213,138,18)" fg:x="467" fg:w="1"/><text x="99.7878%" y="543.50"></text></g><g><title>std::__iterator_category&lt;char*&gt; (1 samples, 0.21%)</title><rect x="99.5736%" y="517" width="0.2132%" height="15" fill="rgb(222,138,19)" fg:x="467" fg:w="1"/><text x="99.7878%" y="527.50"></text></g><g><title>all (469 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(206,183,37)" fg:x="0" fg:w="469"/><text x="0.2143%" y="575.50"></text></g><g><title>webserv (469 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(207,222,45)" fg:x="0" fg:w="469"/><text x="0.2143%" y="559.50">webserv</text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::insert (1 samples, 0.21%)</title><rect x="99.7868%" y="533" width="0.2132%" height="15" fill="rgb(253,1,32)" fg:x="468" fg:w="1"/><text x="100.0011%" y="543.50"></text></g><g><title>std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_const_iterator (1 samples, 0.21%)</title><rect x="99.7868%" y="517" width="0.2132%" height="15" fill="rgb(246,103,29)" fg:x="468" fg:w="1"/><text x="100.0011%" y="527.50"></text></g></svg></svg>