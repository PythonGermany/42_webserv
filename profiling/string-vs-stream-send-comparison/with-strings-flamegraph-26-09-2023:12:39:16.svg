<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1400" height="374" onload="init(evt)" viewBox="0 0 1400 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1390" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1390" y="357.00"> </text><svg id="frames" x="10" width="1380" total_samples="15986"><g><title>AConnection::onPollEvent (3 samples, 0.02%)</title><rect x="0.0000%" y="293" width="0.0188%" height="15" fill="rgb(240,200,10)" fg:x="0" fg:w="3"/><text x="0.2143%" y="303.50"></text></g><g><title>AConnection::onPollOut (2 samples, 0.01%)</title><rect x="0.0063%" y="277" width="0.0125%" height="15" fill="rgb(247,1,19)" fg:x="1" fg:w="2"/><text x="0.2205%" y="287.50"></text></g><g><title>AConnection::onPollOut (2 samples, 0.01%)</title><rect x="0.0188%" y="293" width="0.0125%" height="15" fill="rgb(247,1,19)" fg:x="3" fg:w="2"/><text x="0.2331%" y="303.50"></text></g><g><title>std::istream::read (2 samples, 0.01%)</title><rect x="0.0188%" y="277" width="0.0125%" height="15" fill="rgb(248,197,32)" fg:x="3" fg:w="2"/><text x="0.2331%" y="287.50"></text></g><g><title>Http::isMethodValid (2 samples, 0.01%)</title><rect x="0.0626%" y="213" width="0.0125%" height="15" fill="rgb(247,62,44)" fg:x="10" fg:w="2"/><text x="0.2768%" y="223.50"></text></g><g><title>Http::getAllowedMethods[abi:cxx11] (2 samples, 0.01%)</title><rect x="0.0626%" y="197" width="0.0125%" height="15" fill="rgb(231,65,46)" fg:x="10" fg:w="2"/><text x="0.2768%" y="207.50"></text></g><g><title>Cache::add (3 samples, 0.02%)</title><rect x="0.1001%" y="197" width="0.0188%" height="15" fill="rgb(239,84,44)" fg:x="16" fg:w="3"/><text x="0.3144%" y="207.50"></text></g><g><title>Cache::data_s::operator= (3 samples, 0.02%)</title><rect x="0.1001%" y="181" width="0.0188%" height="15" fill="rgb(248,35,12)" fg:x="16" fg:w="3"/><text x="0.3144%" y="191.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (3 samples, 0.02%)</title><rect x="0.1001%" y="165" width="0.0188%" height="15" fill="rgb(233,7,30)" fg:x="16" fg:w="3"/><text x="0.3144%" y="175.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (3 samples, 0.02%)</title><rect x="0.1001%" y="149" width="0.0188%" height="15" fill="rgb(223,211,19)" fg:x="16" fg:w="3"/><text x="0.3144%" y="159.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.02%)</title><rect x="0.1001%" y="133" width="0.0188%" height="15" fill="rgb(207,210,15)" fg:x="16" fg:w="3"/><text x="0.3144%" y="143.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (2 samples, 0.01%)</title><rect x="0.1251%" y="133" width="0.0125%" height="15" fill="rgb(237,227,49)" fg:x="20" fg:w="2"/><text x="0.3394%" y="143.50"></text></g><g><title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream (3 samples, 0.02%)</title><rect x="0.1251%" y="165" width="0.0188%" height="15" fill="rgb(230,13,26)" fg:x="20" fg:w="3"/><text x="0.3394%" y="175.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (3 samples, 0.02%)</title><rect x="0.1251%" y="149" width="0.0188%" height="15" fill="rgb(223,206,25)" fg:x="20" fg:w="3"/><text x="0.3394%" y="159.50"></text></g><g><title>getMemorySize[abi:cxx11] (7 samples, 0.04%)</title><rect x="0.1189%" y="181" width="0.0438%" height="15" fill="rgb(234,125,39)" fg:x="19" fg:w="7"/><text x="0.3331%" y="191.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (2 samples, 0.01%)</title><rect x="0.1626%" y="165" width="0.0125%" height="15" fill="rgb(223,206,25)" fg:x="26" fg:w="2"/><text x="0.3769%" y="175.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (2 samples, 0.01%)</title><rect x="0.1626%" y="149" width="0.0125%" height="15" fill="rgb(237,227,49)" fg:x="26" fg:w="2"/><text x="0.3769%" y="159.50"></text></g><g><title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream (3 samples, 0.02%)</title><rect x="0.1626%" y="181" width="0.0188%" height="15" fill="rgb(230,13,26)" fg:x="26" fg:w="3"/><text x="0.3769%" y="191.50"></text></g><g><title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.02%)</title><rect x="0.1877%" y="181" width="0.0188%" height="15" fill="rgb(222,170,8)" fg:x="30" fg:w="3"/><text x="0.4019%" y="191.50"></text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (3 samples, 0.02%)</title><rect x="0.1877%" y="165" width="0.0188%" height="15" fill="rgb(213,123,36)" fg:x="30" fg:w="3"/><text x="0.4019%" y="175.50"></text></g><g><title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (3 samples, 0.02%)</title><rect x="0.1877%" y="149" width="0.0188%" height="15" fill="rgb(226,199,5)" fg:x="30" fg:w="3"/><text x="0.4019%" y="159.50"></text></g><g><title>Cache::info[abi:cxx11] (16 samples, 0.10%)</title><rect x="0.1189%" y="197" width="0.1001%" height="15" fill="rgb(221,116,8)" fg:x="19" fg:w="16"/><text x="0.3331%" y="207.50"></text></g><g><title>std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="0.2064%" y="181" width="0.0125%" height="15" fill="rgb(221,154,13)" fg:x="33" fg:w="2"/><text x="0.4207%" y="191.50"></text></g><g><title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="0.2064%" y="165" width="0.0125%" height="15" fill="rgb(222,170,8)" fg:x="33" fg:w="2"/><text x="0.4207%" y="175.50"></text></g><g><title>Cache::isCached (2 samples, 0.01%)</title><rect x="0.2189%" y="197" width="0.0125%" height="15" fill="rgb(237,224,13)" fg:x="35" fg:w="2"/><text x="0.4332%" y="207.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Cache::data_s, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt; &gt; &gt;::find (2 samples, 0.01%)</title><rect x="0.2189%" y="181" width="0.0125%" height="15" fill="rgb(206,161,24)" fg:x="35" fg:w="2"/><text x="0.4332%" y="191.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt; &gt; &gt;::find (2 samples, 0.01%)</title><rect x="0.2189%" y="165" width="0.0125%" height="15" fill="rgb(247,132,23)" fg:x="35" fg:w="2"/><text x="0.4332%" y="175.50"></text></g><g><title>Cache::data_s::operator= (194 samples, 1.21%)</title><rect x="0.2315%" y="181" width="1.2136%" height="15" fill="rgb(248,35,12)" fg:x="37" fg:w="194"/><text x="0.4457%" y="191.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (194 samples, 1.21%)</title><rect x="0.2315%" y="165" width="1.2136%" height="15" fill="rgb(233,7,30)" fg:x="37" fg:w="194"/><text x="0.4457%" y="175.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (194 samples, 1.21%)</title><rect x="0.2315%" y="149" width="1.2136%" height="15" fill="rgb(223,211,19)" fg:x="37" fg:w="194"/><text x="0.4457%" y="159.50"></text></g><g><title>__memcpy_avx_unaligned_erms (194 samples, 1.21%)</title><rect x="0.2315%" y="133" width="1.2136%" height="15" fill="rgb(207,210,15)" fg:x="37" fg:w="194"/><text x="0.4457%" y="143.50"></text></g><g><title>Cache::update (393 samples, 2.46%)</title><rect x="0.2315%" y="197" width="2.4584%" height="15" fill="rgb(241,194,37)" fg:x="37" fg:w="393"/><text x="0.4457%" y="207.50">Ca..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (199 samples, 1.24%)</title><rect x="1.4450%" y="181" width="1.2448%" height="15" fill="rgb(254,182,12)" fg:x="231" fg:w="199"/><text x="1.6593%" y="191.50"></text></g><g><title>__memcpy_avx_unaligned_erms (199 samples, 1.24%)</title><rect x="1.4450%" y="165" width="1.2448%" height="15" fill="rgb(207,210,15)" fg:x="231" fg:w="199"/><text x="1.6593%" y="175.50"></text></g><g><title>Context::getDirective (2 samples, 0.01%)</title><rect x="2.6899%" y="197" width="0.0125%" height="15" fill="rgb(251,123,38)" fg:x="430" fg:w="2"/><text x="2.9041%" y="207.50"></text></g><g><title>getTime (2 samples, 0.01%)</title><rect x="2.7086%" y="181" width="0.0125%" height="15" fill="rgb(245,134,19)" fg:x="433" fg:w="2"/><text x="2.9229%" y="191.50"></text></g><g><title>File::lastModified (4 samples, 0.03%)</title><rect x="2.7086%" y="197" width="0.0250%" height="15" fill="rgb(230,175,3)" fg:x="433" fg:w="4"/><text x="2.9229%" y="207.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (2 samples, 0.01%)</title><rect x="2.7211%" y="181" width="0.0125%" height="15" fill="rgb(254,182,12)" fg:x="435" fg:w="2"/><text x="2.9354%" y="191.50"></text></g><g><title>[webserv] (3 samples, 0.02%)</title><rect x="2.8838%" y="181" width="0.0188%" height="15" fill="rgb(234,9,30)" fg:x="461" fg:w="3"/><text x="3.0981%" y="191.50"></text></g><g><title>__GI___libc_free (49 samples, 0.31%)</title><rect x="2.9025%" y="181" width="0.3065%" height="15" fill="rgb(247,8,17)" fg:x="464" fg:w="49"/><text x="3.1168%" y="191.50"></text></g><g><title>_int_free (34 samples, 0.21%)</title><rect x="2.9964%" y="165" width="0.2127%" height="15" fill="rgb(221,113,48)" fg:x="479" fg:w="34"/><text x="3.2107%" y="175.50"></text></g><g><title>tcache_put (3 samples, 0.02%)</title><rect x="3.1903%" y="149" width="0.0188%" height="15" fill="rgb(227,177,28)" fg:x="510" fg:w="3"/><text x="3.4046%" y="159.50"></text></g><g><title>__GI___libc_read (62 samples, 0.39%)</title><rect x="3.2091%" y="181" width="0.3878%" height="15" fill="rgb(206,204,24)" fg:x="513" fg:w="62"/><text x="3.4233%" y="191.50"></text></g><g><title>__memcpy_avx_unaligned_erms (126 samples, 0.79%)</title><rect x="3.6595%" y="165" width="0.7882%" height="15" fill="rgb(207,210,15)" fg:x="585" fg:w="126"/><text x="3.8737%" y="175.50"></text></g><g><title>__GI___libc_free (2 samples, 0.01%)</title><rect x="4.4476%" y="149" width="0.0125%" height="15" fill="rgb(247,8,17)" fg:x="711" fg:w="2"/><text x="4.6619%" y="159.50"></text></g><g><title>__memcpy_avx_unaligned_erms (590 samples, 3.69%)</title><rect x="4.4602%" y="149" width="3.6907%" height="15" fill="rgb(207,210,15)" fg:x="713" fg:w="590"/><text x="4.6744%" y="159.50">__mem..</text></g><g><title>__memmove_avx_unaligned (2 samples, 0.01%)</title><rect x="8.1509%" y="149" width="0.0125%" height="15" fill="rgb(223,105,5)" fg:x="1303" fg:w="2"/><text x="8.3652%" y="159.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (731 samples, 4.57%)</title><rect x="3.5969%" y="181" width="4.5728%" height="15" fill="rgb(216,50,33)" fg:x="575" fg:w="731"/><text x="3.8112%" y="191.50">std::__..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (595 samples, 3.72%)</title><rect x="4.4476%" y="165" width="3.7220%" height="15" fill="rgb(250,46,35)" fg:x="711" fg:w="595"/><text x="4.6619%" y="175.50">std::..</text></g><g><title>[libstdc++.so.6.0.30] (2 samples, 0.01%)</title><rect x="8.2447%" y="165" width="0.0125%" height="15" fill="rgb(231,140,31)" fg:x="1318" fg:w="2"/><text x="8.4590%" y="175.50"></text></g><g><title>__memcpy_avx_unaligned_erms (62 samples, 0.39%)</title><rect x="8.2572%" y="165" width="0.3878%" height="15" fill="rgb(207,210,15)" fg:x="1320" fg:w="62"/><text x="8.4715%" y="175.50"></text></g><g><title>__memmove_avx_unaligned (2 samples, 0.01%)</title><rect x="8.6451%" y="165" width="0.0125%" height="15" fill="rgb(223,105,5)" fg:x="1382" fg:w="2"/><text x="8.8594%" y="175.50"></text></g><g><title>[libstdc++.so.6.0.30] (5 samples, 0.03%)</title><rect x="8.7014%" y="149" width="0.0313%" height="15" fill="rgb(231,140,31)" fg:x="1391" fg:w="5"/><text x="8.9156%" y="159.50"></text></g><g><title>operator new (44 samples, 0.28%)</title><rect x="8.6576%" y="165" width="0.2752%" height="15" fill="rgb(214,91,1)" fg:x="1384" fg:w="44"/><text x="8.8719%" y="175.50"></text></g><g><title>__GI___libc_malloc (32 samples, 0.20%)</title><rect x="8.7326%" y="149" width="0.2002%" height="15" fill="rgb(206,112,53)" fg:x="1396" fg:w="32"/><text x="8.9469%" y="159.50"></text></g><g><title>tcache_get (7 samples, 0.04%)</title><rect x="8.8890%" y="133" width="0.0438%" height="15" fill="rgb(227,126,51)" fg:x="1421" fg:w="7"/><text x="9.1033%" y="143.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (126 samples, 0.79%)</title><rect x="8.1696%" y="181" width="0.7882%" height="15" fill="rgb(240,176,52)" fg:x="1306" fg:w="126"/><text x="8.3839%" y="191.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (4 samples, 0.03%)</title><rect x="8.9328%" y="165" width="0.0250%" height="15" fill="rgb(211,63,27)" fg:x="1428" fg:w="4"/><text x="9.1471%" y="175.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (4 samples, 0.03%)</title><rect x="8.9641%" y="181" width="0.0250%" height="15" fill="rgb(247,126,12)" fg:x="1433" fg:w="4"/><text x="9.1784%" y="191.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (4 samples, 0.03%)</title><rect x="8.9891%" y="181" width="0.0250%" height="15" fill="rgb(216,41,4)" fg:x="1437" fg:w="4"/><text x="9.2034%" y="191.50"></text></g><g><title>std::allocator&lt;char&gt;::~allocator (3 samples, 0.02%)</title><rect x="9.0204%" y="181" width="0.0188%" height="15" fill="rgb(235,61,44)" fg:x="1442" fg:w="3"/><text x="9.2347%" y="191.50"></text></g><g><title>File::read[abi:cxx11] (1,009 samples, 6.31%)</title><rect x="2.7336%" y="197" width="6.3118%" height="15" fill="rgb(220,108,13)" fg:x="437" fg:w="1009"/><text x="2.9479%" y="207.50">File::read..</text></g><g><title>Response::setBody (2,919 samples, 18.26%)</title><rect x="9.0579%" y="197" width="18.2597%" height="15" fill="rgb(243,0,40)" fg:x="1448" fg:w="2919"/><text x="9.2722%" y="207.50">Response::setBody</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (2,919 samples, 18.26%)</title><rect x="9.0579%" y="181" width="18.2597%" height="15" fill="rgb(233,7,30)" fg:x="1448" fg:w="2919"/><text x="9.2722%" y="191.50">std::__cxx11::basic_string&lt;char, s..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (2,919 samples, 18.26%)</title><rect x="9.0579%" y="165" width="18.2597%" height="15" fill="rgb(223,211,19)" fg:x="1448" fg:w="2919"/><text x="9.2722%" y="175.50">std::__cxx11::basic_string&lt;char, s..</text></g><g><title>__memcpy_avx_unaligned_erms (2,919 samples, 18.26%)</title><rect x="9.0579%" y="149" width="18.2597%" height="15" fill="rgb(207,210,15)" fg:x="1448" fg:w="2919"/><text x="9.2722%" y="159.50">__memcpy_avx_unaligned_erms</text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_get_insert_hint_unique_pos (2 samples, 0.01%)</title><rect x="27.3177%" y="117" width="0.0125%" height="15" fill="rgb(206,139,2)" fg:x="4367" fg:w="2"/><text x="27.5319%" y="127.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::insert (5 samples, 0.03%)</title><rect x="27.3177%" y="165" width="0.0313%" height="15" fill="rgb(253,1,32)" fg:x="4367" fg:w="5"/><text x="27.5319%" y="175.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_insert_unique_ (5 samples, 0.03%)</title><rect x="27.3177%" y="149" width="0.0313%" height="15" fill="rgb(229,182,52)" fg:x="4367" fg:w="5"/><text x="27.5319%" y="159.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_insert_unique_&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (5 samples, 0.03%)</title><rect x="27.3177%" y="133" width="0.0313%" height="15" fill="rgb(227,197,36)" fg:x="4367" fg:w="5"/><text x="27.5319%" y="143.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_insert_&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (3 samples, 0.02%)</title><rect x="27.3302%" y="117" width="0.0188%" height="15" fill="rgb(210,214,38)" fg:x="4369" fg:w="3"/><text x="27.5444%" y="127.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Alloc_node::operator (3 samples, 0.02%)</title><rect x="27.3302%" y="101" width="0.0188%" height="15" fill="rgb(249,156,9)" fg:x="4369" fg:w="3"/><text x="27.5444%" y="111.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_create_node (3 samples, 0.02%)</title><rect x="27.3302%" y="85" width="0.0188%" height="15" fill="rgb(223,17,51)" fg:x="4369" fg:w="3"/><text x="27.5444%" y="95.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_get_node (2 samples, 0.01%)</title><rect x="27.3364%" y="69" width="0.0125%" height="15" fill="rgb(240,154,39)" fg:x="4370" fg:w="2"/><text x="27.5507%" y="79.50"></text></g><g><title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::allocate (2 samples, 0.01%)</title><rect x="27.3364%" y="53" width="0.0125%" height="15" fill="rgb(232,149,36)" fg:x="4370" fg:w="2"/><text x="27.5507%" y="63.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::allocate (2 samples, 0.01%)</title><rect x="27.3364%" y="37" width="0.0125%" height="15" fill="rgb(205,50,19)" fg:x="4370" fg:w="2"/><text x="27.5507%" y="47.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (6 samples, 0.04%)</title><rect x="27.3177%" y="181" width="0.0375%" height="15" fill="rgb(213,223,15)" fg:x="4367" fg:w="6"/><text x="27.5319%" y="191.50"></text></g><g><title>Response::setHeader (9 samples, 0.06%)</title><rect x="27.3177%" y="197" width="0.0563%" height="15" fill="rgb(253,98,0)" fg:x="4367" fg:w="9"/><text x="27.5319%" y="207.50"></text></g><g><title>std::transform&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, int (*)(int)&gt; (3 samples, 0.02%)</title><rect x="27.3552%" y="181" width="0.0188%" height="15" fill="rgb(232,139,18)" fg:x="4373" fg:w="3"/><text x="27.5695%" y="191.50"></text></g><g><title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.01%)</title><rect x="27.3740%" y="181" width="0.0125%" height="15" fill="rgb(211,221,44)" fg:x="4376" fg:w="2"/><text x="27.5882%" y="191.50"></text></g><g><title> (2 samples, 0.01%)</title><rect x="27.3740%" y="165" width="0.0125%" height="15" fill="rgb(223,113,14)" fg:x="4376" fg:w="2"/><text x="27.5882%" y="175.50"></text></g><g><title>VirtualHost::getMimeType (4 samples, 0.03%)</title><rect x="27.3740%" y="197" width="0.0250%" height="15" fill="rgb(228,222,25)" fg:x="4376" fg:w="4"/><text x="27.5882%" y="207.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (2 samples, 0.01%)</title><rect x="27.3865%" y="181" width="0.0125%" height="15" fill="rgb(251,39,6)" fg:x="4378" fg:w="2"/><text x="27.6007%" y="191.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (2 samples, 0.01%)</title><rect x="27.3865%" y="165" width="0.0125%" height="15" fill="rgb(215,30,0)" fg:x="4378" fg:w="2"/><text x="27.6007%" y="175.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_lower_bound (2 samples, 0.01%)</title><rect x="27.3865%" y="149" width="0.0125%" height="15" fill="rgb(243,60,52)" fg:x="4378" fg:w="2"/><text x="27.6007%" y="159.50"></text></g><g><title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2 samples, 0.01%)</title><rect x="27.3865%" y="133" width="0.0125%" height="15" fill="rgb(228,56,32)" fg:x="4378" fg:w="2"/><text x="27.6007%" y="143.50"></text></g><g><title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="27.3865%" y="117" width="0.0125%" height="15" fill="rgb(241,103,2)" fg:x="4378" fg:w="2"/><text x="27.6007%" y="127.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (2 samples, 0.01%)</title><rect x="27.3865%" y="101" width="0.0125%" height="15" fill="rgb(212,2,49)" fg:x="4378" fg:w="2"/><text x="27.6007%" y="111.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (3 samples, 0.02%)</title><rect x="27.3990%" y="197" width="0.0188%" height="15" fill="rgb(240,176,52)" fg:x="4380" fg:w="3"/><text x="27.6133%" y="207.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (2 samples, 0.01%)</title><rect x="27.4177%" y="197" width="0.0125%" height="15" fill="rgb(244,92,22)" fg:x="4383" fg:w="2"/><text x="27.6320%" y="207.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3,321 samples, 20.77%)</title><rect x="27.4303%" y="165" width="20.7744%" height="15" fill="rgb(207,210,15)" fg:x="4385" fg:w="3321"/><text x="27.6445%" y="175.50">__memcpy_avx_unaligned_erms</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (3,325 samples, 20.80%)</title><rect x="27.4303%" y="197" width="20.7994%" height="15" fill="rgb(233,7,30)" fg:x="4385" fg:w="3325"/><text x="27.6445%" y="207.50">std::__cxx11::basic_string&lt;char, std::c..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (3,325 samples, 20.80%)</title><rect x="27.4303%" y="181" width="20.7994%" height="15" fill="rgb(223,211,19)" fg:x="4385" fg:w="3325"/><text x="27.6445%" y="191.50">std::__cxx11::basic_string&lt;char, std::c..</text></g><g><title>operator new (3 samples, 0.02%)</title><rect x="48.2109%" y="165" width="0.0188%" height="15" fill="rgb(214,91,1)" fg:x="7707" fg:w="3"/><text x="48.4252%" y="175.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.02%)</title><rect x="48.2109%" y="149" width="0.0188%" height="15" fill="rgb(206,112,53)" fg:x="7707" fg:w="3"/><text x="48.4252%" y="159.50"></text></g><g><title>_int_malloc (3 samples, 0.02%)</title><rect x="48.2109%" y="133" width="0.0188%" height="15" fill="rgb(222,219,51)" fg:x="7707" fg:w="3"/><text x="48.4252%" y="143.50"></text></g><g><title>std::allocator&lt;char&gt;::allocator (2 samples, 0.01%)</title><rect x="48.2360%" y="197" width="0.0125%" height="15" fill="rgb(215,89,36)" fg:x="7711" fg:w="2"/><text x="48.4502%" y="207.50"></text></g><g><title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (3 samples, 0.02%)</title><rect x="48.2547%" y="197" width="0.0188%" height="15" fill="rgb(226,32,40)" fg:x="7714" fg:w="3"/><text x="48.4690%" y="207.50"></text></g><g><title>Http::processFile (7,709 samples, 48.22%)</title><rect x="0.0751%" y="213" width="48.2234%" height="15" fill="rgb(253,96,38)" fg:x="12" fg:w="7709"/><text x="0.2894%" y="223.50">Http::processFile</text></g><g><title>toString&lt;unsigned long&gt; (4 samples, 0.03%)</title><rect x="48.2735%" y="197" width="0.0250%" height="15" fill="rgb(226,165,29)" fg:x="7717" fg:w="4"/><text x="48.4878%" y="207.50"></text></g><g><title>std::ostream::_M_insert&lt;unsigned long&gt; (2 samples, 0.01%)</title><rect x="48.2860%" y="181" width="0.0125%" height="15" fill="rgb(226,22,13)" fg:x="7719" fg:w="2"/><text x="48.5003%" y="191.50"></text></g><g><title>Request::isValid (2 samples, 0.01%)</title><rect x="48.3048%" y="213" width="0.0125%" height="15" fill="rgb(210,87,46)" fg:x="7722" fg:w="2"/><text x="48.5191%" y="223.50"></text></g><g><title>Uri::pathOutOfBound (2 samples, 0.01%)</title><rect x="48.3048%" y="197" width="0.0125%" height="15" fill="rgb(218,183,48)" fg:x="7722" fg:w="2"/><text x="48.5191%" y="207.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (2 samples, 0.01%)</title><rect x="48.3048%" y="181" width="0.0125%" height="15" fill="rgb(240,176,52)" fg:x="7722" fg:w="2"/><text x="48.5191%" y="191.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (2 samples, 0.01%)</title><rect x="48.3360%" y="197" width="0.0125%" height="15" fill="rgb(254,182,12)" fg:x="7727" fg:w="2"/><text x="48.5503%" y="207.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (3 samples, 0.02%)</title><rect x="48.3486%" y="197" width="0.0188%" height="15" fill="rgb(244,92,22)" fg:x="7729" fg:w="3"/><text x="48.5628%" y="207.50"></text></g><g><title>VirtualHost::matchLocation (8 samples, 0.05%)</title><rect x="48.3298%" y="213" width="0.0500%" height="15" fill="rgb(243,79,28)" fg:x="7726" fg:w="8"/><text x="48.5441%" y="223.50"></text></g><g><title>Http::processRequest (7,731 samples, 48.36%)</title><rect x="0.0375%" y="229" width="48.3611%" height="15" fill="rgb(223,169,38)" fg:x="6" fg:w="7731"/><text x="0.2518%" y="239.50">Http::processRequest</text></g><g><title>AConnection::send (2 samples, 0.01%)</title><rect x="48.4111%" y="213" width="0.0125%" height="15" fill="rgb(252,37,44)" fg:x="7739" fg:w="2"/><text x="48.6254%" y="223.50"></text></g><g><title>__GI___libc_free (2 samples, 0.01%)</title><rect x="48.4361%" y="197" width="0.0125%" height="15" fill="rgb(247,8,17)" fg:x="7743" fg:w="2"/><text x="48.6504%" y="207.50"></text></g><g><title>__tz_convert (2 samples, 0.01%)</title><rect x="48.4549%" y="181" width="0.0125%" height="15" fill="rgb(241,122,38)" fg:x="7746" fg:w="2"/><text x="48.6692%" y="191.50"></text></g><g><title>__offtime (2 samples, 0.01%)</title><rect x="48.4549%" y="165" width="0.0125%" height="15" fill="rgb(233,93,19)" fg:x="7746" fg:w="2"/><text x="48.6692%" y="175.50"></text></g><g><title>getTime (5 samples, 0.03%)</title><rect x="48.4486%" y="197" width="0.0313%" height="15" fill="rgb(245,134,19)" fg:x="7745" fg:w="5"/><text x="48.6629%" y="207.50"></text></g><g><title>_IO_new_do_write (2 samples, 0.01%)</title><rect x="48.5112%" y="133" width="0.0125%" height="15" fill="rgb(244,36,2)" fg:x="7755" fg:w="2"/><text x="48.7255%" y="143.50"></text></g><g><title>_IO_new_do_write (2 samples, 0.01%)</title><rect x="48.5112%" y="117" width="0.0125%" height="15" fill="rgb(244,36,2)" fg:x="7755" fg:w="2"/><text x="48.7255%" y="127.50"></text></g><g><title>new_do_write (2 samples, 0.01%)</title><rect x="48.5112%" y="101" width="0.0125%" height="15" fill="rgb(242,54,39)" fg:x="7755" fg:w="2"/><text x="48.7255%" y="111.50"></text></g><g><title>_IO_new_file_write (2 samples, 0.01%)</title><rect x="48.5112%" y="85" width="0.0125%" height="15" fill="rgb(227,189,47)" fg:x="7755" fg:w="2"/><text x="48.7255%" y="95.50"></text></g><g><title>__GI___libc_write (2 samples, 0.01%)</title><rect x="48.5112%" y="69" width="0.0125%" height="15" fill="rgb(232,197,30)" fg:x="7755" fg:w="2"/><text x="48.7255%" y="79.50"></text></g><g><title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (8 samples, 0.05%)</title><rect x="48.4862%" y="197" width="0.0500%" height="15" fill="rgb(222,170,8)" fg:x="7751" fg:w="8"/><text x="48.7005%" y="207.50"></text></g><g><title>__GI__IO_fwrite (7 samples, 0.04%)</title><rect x="48.4924%" y="181" width="0.0438%" height="15" fill="rgb(244,69,17)" fg:x="7752" fg:w="7"/><text x="48.7067%" y="191.50"></text></g><g><title>_IO_new_file_xsputn (6 samples, 0.04%)</title><rect x="48.4987%" y="165" width="0.0375%" height="15" fill="rgb(251,170,42)" fg:x="7753" fg:w="6"/><text x="48.7130%" y="175.50"></text></g><g><title>_IO_new_file_xsputn (5 samples, 0.03%)</title><rect x="48.5049%" y="149" width="0.0313%" height="15" fill="rgb(251,170,42)" fg:x="7754" fg:w="5"/><text x="48.7192%" y="159.50"></text></g><g><title>__GI__IO_default_xsputn (2 samples, 0.01%)</title><rect x="48.5237%" y="133" width="0.0125%" height="15" fill="rgb(222,196,23)" fg:x="7757" fg:w="2"/><text x="48.7380%" y="143.50"></text></g><g><title>__GI__IO_default_xsputn (2 samples, 0.01%)</title><rect x="48.5237%" y="117" width="0.0125%" height="15" fill="rgb(222,196,23)" fg:x="7757" fg:w="2"/><text x="48.7380%" y="127.50"></text></g><g><title>_IO_new_file_overflow (2 samples, 0.01%)</title><rect x="48.5237%" y="101" width="0.0125%" height="15" fill="rgb(232,179,10)" fg:x="7757" fg:w="2"/><text x="48.7380%" y="111.50"></text></g><g><title>std::endl&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.02%)</title><rect x="48.5362%" y="197" width="0.0188%" height="15" fill="rgb(246,112,30)" fg:x="7759" fg:w="3"/><text x="48.7505%" y="207.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (3 samples, 0.02%)</title><rect x="48.5675%" y="181" width="0.0188%" height="15" fill="rgb(209,28,51)" fg:x="7764" fg:w="3"/><text x="48.7818%" y="191.50"></text></g><g><title>Log::write (27 samples, 0.17%)</title><rect x="48.4236%" y="213" width="0.1689%" height="15" fill="rgb(230,27,54)" fg:x="7741" fg:w="27"/><text x="48.6379%" y="223.50"></text></g><g><title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (6 samples, 0.04%)</title><rect x="48.5550%" y="197" width="0.0375%" height="15" fill="rgb(226,32,40)" fg:x="7762" fg:w="6"/><text x="48.7693%" y="207.50"></text></g><g><title>Request::getHeader (3 samples, 0.02%)</title><rect x="48.5925%" y="213" width="0.0188%" height="15" fill="rgb(238,121,14)" fg:x="7768" fg:w="3"/><text x="48.8068%" y="223.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (3 samples, 0.02%)</title><rect x="48.5925%" y="197" width="0.0188%" height="15" fill="rgb(251,39,6)" fg:x="7768" fg:w="3"/><text x="48.8068%" y="207.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (3 samples, 0.02%)</title><rect x="48.5925%" y="181" width="0.0188%" height="15" fill="rgb(215,30,0)" fg:x="7768" fg:w="3"/><text x="48.8068%" y="191.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_lower_bound (2 samples, 0.01%)</title><rect x="48.5988%" y="165" width="0.0125%" height="15" fill="rgb(243,60,52)" fg:x="7769" fg:w="2"/><text x="48.8131%" y="175.50"></text></g><g><title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (2 samples, 0.01%)</title><rect x="48.5988%" y="149" width="0.0125%" height="15" fill="rgb(228,56,32)" fg:x="7769" fg:w="2"/><text x="48.8131%" y="159.50"></text></g><g><title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (2 samples, 0.01%)</title><rect x="48.5988%" y="133" width="0.0125%" height="15" fill="rgb(241,103,2)" fg:x="7769" fg:w="2"/><text x="48.8131%" y="143.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (2 samples, 0.01%)</title><rect x="48.5988%" y="117" width="0.0125%" height="15" fill="rgb(212,2,49)" fg:x="7769" fg:w="2"/><text x="48.8131%" y="127.50"></text></g><g><title>Response::generateHead[abi:cxx11] (2 samples, 0.01%)</title><rect x="48.6113%" y="213" width="0.0125%" height="15" fill="rgb(210,158,47)" fg:x="7771" fg:w="2"/><text x="48.8256%" y="223.50"></text></g><g><title>Response::getHeader (3 samples, 0.02%)</title><rect x="48.6238%" y="213" width="0.0188%" height="15" fill="rgb(223,50,9)" fg:x="7773" fg:w="3"/><text x="48.8381%" y="223.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (2 samples, 0.01%)</title><rect x="48.6301%" y="197" width="0.0125%" height="15" fill="rgb(251,39,6)" fg:x="7774" fg:w="2"/><text x="48.8443%" y="207.50"></text></g><g><title>Response::setHeader (2 samples, 0.01%)</title><rect x="48.6426%" y="213" width="0.0125%" height="15" fill="rgb(253,98,0)" fg:x="7776" fg:w="2"/><text x="48.8568%" y="223.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (2 samples, 0.01%)</title><rect x="48.6426%" y="197" width="0.0125%" height="15" fill="rgb(213,223,15)" fg:x="7776" fg:w="2"/><text x="48.8568%" y="207.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::insert (2 samples, 0.01%)</title><rect x="48.6426%" y="181" width="0.0125%" height="15" fill="rgb(253,1,32)" fg:x="7776" fg:w="2"/><text x="48.8568%" y="191.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_insert_unique_ (2 samples, 0.01%)</title><rect x="48.6426%" y="165" width="0.0125%" height="15" fill="rgb(229,182,52)" fg:x="7776" fg:w="2"/><text x="48.8568%" y="175.50"></text></g><g><title>getTime (2 samples, 0.01%)</title><rect x="48.6613%" y="213" width="0.0125%" height="15" fill="rgb(245,134,19)" fg:x="7779" fg:w="2"/><text x="48.8756%" y="223.50"></text></g><g><title>__vdso_time (2 samples, 0.01%)</title><rect x="48.6613%" y="197" width="0.0125%" height="15" fill="rgb(223,154,41)" fg:x="7779" fg:w="2"/><text x="48.8756%" y="207.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2,757 samples, 17.25%)</title><rect x="48.6801%" y="197" width="17.2463%" height="15" fill="rgb(207,210,15)" fg:x="7782" fg:w="2757"/><text x="48.8944%" y="207.50">__memcpy_avx_unaligned_erms</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (3 samples, 0.02%)</title><rect x="65.9264%" y="181" width="0.0188%" height="15" fill="rgb(237,227,49)" fg:x="10539" fg:w="3"/><text x="66.1407%" y="191.50"></text></g><g><title>std::use_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (2 samples, 0.01%)</title><rect x="65.9327%" y="165" width="0.0125%" height="15" fill="rgb(227,16,42)" fg:x="10540" fg:w="2"/><text x="66.1470%" y="175.50"></text></g><g><title>std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_istringstream (2,762 samples, 17.28%)</title><rect x="48.6738%" y="213" width="17.2776%" height="15" fill="rgb(252,210,43)" fg:x="7781" fg:w="2762"/><text x="48.8881%" y="223.50">std::__cxx11::basic_istringstrea..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (4 samples, 0.03%)</title><rect x="65.9264%" y="197" width="0.0250%" height="15" fill="rgb(223,206,25)" fg:x="10539" fg:w="4"/><text x="66.1407%" y="207.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (3 samples, 0.02%)</title><rect x="65.9640%" y="197" width="0.0188%" height="15" fill="rgb(216,50,33)" fg:x="10545" fg:w="3"/><text x="66.1783%" y="207.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (2 samples, 0.01%)</title><rect x="65.9702%" y="181" width="0.0125%" height="15" fill="rgb(250,46,35)" fg:x="10546" fg:w="2"/><text x="66.1845%" y="191.50"></text></g><g><title>operator new (2 samples, 0.01%)</title><rect x="65.9702%" y="165" width="0.0125%" height="15" fill="rgb(214,91,1)" fg:x="10546" fg:w="2"/><text x="66.1845%" y="175.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.01%)</title><rect x="65.9702%" y="149" width="0.0125%" height="15" fill="rgb(206,112,53)" fg:x="10546" fg:w="2"/><text x="66.1845%" y="159.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (2 samples, 0.01%)</title><rect x="65.9827%" y="197" width="0.0125%" height="15" fill="rgb(254,182,12)" fg:x="10548" fg:w="2"/><text x="66.1970%" y="207.50"></text></g><g><title>Http::sendResponse (2,814 samples, 17.60%)</title><rect x="48.3986%" y="229" width="17.6029%" height="15" fill="rgb(226,37,44)" fg:x="7737" fg:w="2814"/><text x="48.6129%" y="239.50">Http::sendResponse</text></g><g><title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (6 samples, 0.04%)</title><rect x="65.9640%" y="213" width="0.0375%" height="15" fill="rgb(226,32,40)" fg:x="10545" fg:w="6"/><text x="66.1783%" y="223.50"></text></g><g><title>Uri::Uri (2 samples, 0.01%)</title><rect x="66.0015%" y="213" width="0.0125%" height="15" fill="rgb(239,171,0)" fg:x="10551" fg:w="2"/><text x="66.2158%" y="223.50"></text></g><g><title>Request::Request (5 samples, 0.03%)</title><rect x="66.0015%" y="229" width="0.0313%" height="15" fill="rgb(236,207,40)" fg:x="10551" fg:w="5"/><text x="66.2158%" y="239.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::map (3 samples, 0.02%)</title><rect x="66.0140%" y="213" width="0.0188%" height="15" fill="rgb(235,99,43)" fg:x="10553" fg:w="3"/><text x="66.2283%" y="223.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Rb_tree (3 samples, 0.02%)</title><rect x="66.0140%" y="197" width="0.0188%" height="15" fill="rgb(232,136,19)" fg:x="10553" fg:w="3"/><text x="66.2283%" y="207.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Rb_tree_impl&lt;std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, false&gt;::_Rb_tree_impl (3 samples, 0.02%)</title><rect x="66.0140%" y="181" width="0.0188%" height="15" fill="rgb(249,6,43)" fg:x="10553" fg:w="3"/><text x="66.2283%" y="191.50"></text></g><g><title>std::_Rb_tree_key_compare&lt;std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Rb_tree_key_compare (2 samples, 0.01%)</title><rect x="66.0203%" y="165" width="0.0125%" height="15" fill="rgb(233,84,50)" fg:x="10554" fg:w="2"/><text x="66.2346%" y="175.50"></text></g><g><title>Request::operator= (6 samples, 0.04%)</title><rect x="66.0390%" y="229" width="0.0375%" height="15" fill="rgb(217,165,16)" fg:x="10557" fg:w="6"/><text x="66.2533%" y="239.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator= (6 samples, 0.04%)</title><rect x="66.0390%" y="213" width="0.0375%" height="15" fill="rgb(217,57,53)" fg:x="10557" fg:w="6"/><text x="66.2533%" y="223.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator= (5 samples, 0.03%)</title><rect x="66.0453%" y="197" width="0.0313%" height="15" fill="rgb(248,210,34)" fg:x="10558" fg:w="5"/><text x="66.2596%" y="207.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_Reuse_or_alloc_node::~_Reuse_or_alloc_node (3 samples, 0.02%)</title><rect x="66.0578%" y="181" width="0.0188%" height="15" fill="rgb(217,8,3)" fg:x="10560" fg:w="3"/><text x="66.2721%" y="191.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::_M_erase (3 samples, 0.02%)</title><rect x="66.0578%" y="165" width="0.0188%" height="15" fill="rgb(253,113,26)" fg:x="10560" fg:w="3"/><text x="66.2721%" y="175.50"></text></g><g><title>Request::parseHeader (2 samples, 0.01%)</title><rect x="66.0766%" y="213" width="0.0125%" height="15" fill="rgb(217,141,20)" fg:x="10563" fg:w="2"/><text x="66.2909%" y="223.50"></text></g><g><title>Request::setHeader (2 samples, 0.01%)</title><rect x="66.0766%" y="197" width="0.0125%" height="15" fill="rgb(246,210,30)" fg:x="10563" fg:w="2"/><text x="66.2909%" y="207.50"></text></g><g><title>Uri::Uri (2 samples, 0.01%)</title><rect x="66.0891%" y="213" width="0.0125%" height="15" fill="rgb(239,171,0)" fg:x="10565" fg:w="2"/><text x="66.3034%" y="223.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate (2 samples, 0.01%)</title><rect x="66.1141%" y="165" width="0.0125%" height="15" fill="rgb(254,83,21)" fg:x="10569" fg:w="2"/><text x="66.3284%" y="175.50"></text></g><g><title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocate (2 samples, 0.01%)</title><rect x="66.1141%" y="149" width="0.0125%" height="15" fill="rgb(254,98,4)" fg:x="10569" fg:w="2"/><text x="66.3284%" y="159.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocate (2 samples, 0.01%)</title><rect x="66.1141%" y="133" width="0.0125%" height="15" fill="rgb(252,103,37)" fg:x="10569" fg:w="2"/><text x="66.3284%" y="143.50"></text></g><g><title>operator new (2 samples, 0.01%)</title><rect x="66.1141%" y="117" width="0.0125%" height="15" fill="rgb(214,91,1)" fg:x="10569" fg:w="2"/><text x="66.3284%" y="127.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert (3 samples, 0.02%)</title><rect x="66.1141%" y="181" width="0.0188%" height="15" fill="rgb(232,153,51)" fg:x="10569" fg:w="3"/><text x="66.3284%" y="191.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (4 samples, 0.03%)</title><rect x="66.1141%" y="197" width="0.0250%" height="15" fill="rgb(228,192,54)" fg:x="10569" fg:w="4"/><text x="66.3284%" y="207.50"></text></g><g><title>split (7 samples, 0.04%)</title><rect x="66.1016%" y="213" width="0.0438%" height="15" fill="rgb(229,86,52)" fg:x="10567" fg:w="7"/><text x="66.3159%" y="223.50"></text></g><g><title>Request::parseHead (12 samples, 0.08%)</title><rect x="66.0766%" y="229" width="0.0751%" height="15" fill="rgb(235,106,14)" fg:x="10563" fg:w="12"/><text x="66.2909%" y="239.50"></text></g><g><title>VirtualHost::matchVirtualHost (5 samples, 0.03%)</title><rect x="66.1579%" y="229" width="0.0313%" height="15" fill="rgb(209,165,38)" fg:x="10576" fg:w="5"/><text x="66.3722%" y="239.50"></text></g><g><title>_int_malloc (2 samples, 0.01%)</title><rect x="66.1954%" y="149" width="0.0125%" height="15" fill="rgb(222,219,51)" fg:x="10582" fg:w="2"/><text x="66.4097%" y="159.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (3 samples, 0.02%)</title><rect x="66.1954%" y="213" width="0.0188%" height="15" fill="rgb(216,50,33)" fg:x="10582" fg:w="3"/><text x="66.4097%" y="223.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (3 samples, 0.02%)</title><rect x="66.1954%" y="197" width="0.0188%" height="15" fill="rgb(250,46,35)" fg:x="10582" fg:w="3"/><text x="66.4097%" y="207.50"></text></g><g><title>operator new (3 samples, 0.02%)</title><rect x="66.1954%" y="181" width="0.0188%" height="15" fill="rgb(214,91,1)" fg:x="10582" fg:w="3"/><text x="66.4097%" y="191.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.02%)</title><rect x="66.1954%" y="165" width="0.0188%" height="15" fill="rgb(206,112,53)" fg:x="10582" fg:w="3"/><text x="66.4097%" y="175.50"></text></g><g><title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (4 samples, 0.03%)</title><rect x="66.1954%" y="229" width="0.0250%" height="15" fill="rgb(226,32,40)" fg:x="10582" fg:w="4"/><text x="66.4097%" y="239.50"></text></g><g><title>__GI_inet_ntop (4 samples, 0.03%)</title><rect x="66.2267%" y="197" width="0.0250%" height="15" fill="rgb(238,161,7)" fg:x="10587" fg:w="4"/><text x="66.4410%" y="207.50"></text></g><g><title>inet_ntop4 (3 samples, 0.02%)</title><rect x="66.2330%" y="181" width="0.0188%" height="15" fill="rgb(227,201,18)" fg:x="10588" fg:w="3"/><text x="66.4472%" y="191.50"></text></g><g><title>__sprintf (3 samples, 0.02%)</title><rect x="66.2330%" y="165" width="0.0188%" height="15" fill="rgb(235,219,35)" fg:x="10588" fg:w="3"/><text x="66.4472%" y="175.50"></text></g><g><title>__vsprintf_internal (3 samples, 0.02%)</title><rect x="66.2330%" y="149" width="0.0188%" height="15" fill="rgb(236,168,18)" fg:x="10588" fg:w="3"/><text x="66.4472%" y="159.50"></text></g><g><title>__vfprintf_internal (3 samples, 0.02%)</title><rect x="66.2330%" y="133" width="0.0188%" height="15" fill="rgb(246,29,23)" fg:x="10588" fg:w="3"/><text x="66.4472%" y="143.50"></text></g><g><title>__find_specmb (3 samples, 0.02%)</title><rect x="66.2330%" y="117" width="0.0188%" height="15" fill="rgb(241,168,31)" fg:x="10588" fg:w="3"/><text x="66.4472%" y="127.50"></text></g><g><title>__strchrnul_avx2 (3 samples, 0.02%)</title><rect x="66.2330%" y="101" width="0.0188%" height="15" fill="rgb(248,143,36)" fg:x="10588" fg:w="3"/><text x="66.4472%" y="111.50"></text></g><g><title>operator&lt;&lt; (7 samples, 0.04%)</title><rect x="66.2204%" y="213" width="0.0438%" height="15" fill="rgb(206,204,30)" fg:x="10586" fg:w="7"/><text x="66.4347%" y="223.50"></text></g><g><title>AConnection::passReadBuffer (10,591 samples, 66.25%)</title><rect x="0.0375%" y="261" width="66.2517%" height="15" fill="rgb(214,198,32)" fg:x="6" fg:w="10591"/><text x="0.2518%" y="271.50">AConnection::passReadBuffer</text></g><g><title>Http::OnHeadRecv (10,591 samples, 66.25%)</title><rect x="0.0375%" y="245" width="66.2517%" height="15" fill="rgb(217,223,8)" fg:x="6" fg:w="10591"/><text x="0.2518%" y="255.50">Http::OnHeadRecv</text></g><g><title>toString&lt;Address&amp;&gt; (11 samples, 0.07%)</title><rect x="66.2204%" y="229" width="0.0688%" height="15" fill="rgb(233,146,38)" fg:x="10586" fg:w="11"/><text x="66.4347%" y="239.50"></text></g><g><title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream (4 samples, 0.03%)</title><rect x="66.2642%" y="213" width="0.0250%" height="15" fill="rgb(230,13,26)" fg:x="10593" fg:w="4"/><text x="66.4785%" y="223.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (4 samples, 0.03%)</title><rect x="66.2642%" y="197" width="0.0250%" height="15" fill="rgb(223,206,25)" fg:x="10593" fg:w="4"/><text x="66.4785%" y="207.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (4 samples, 0.03%)</title><rect x="66.2642%" y="181" width="0.0250%" height="15" fill="rgb(237,227,49)" fg:x="10593" fg:w="4"/><text x="66.4785%" y="191.50"></text></g><g><title>std::use_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (2 samples, 0.01%)</title><rect x="66.2767%" y="165" width="0.0125%" height="15" fill="rgb(227,16,42)" fg:x="10595" fg:w="2"/><text x="66.4910%" y="175.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;char*&gt; (3 samples, 0.02%)</title><rect x="66.2955%" y="261" width="0.0188%" height="15" fill="rgb(217,84,11)" fg:x="10598" fg:w="3"/><text x="66.5098%" y="271.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (3 samples, 0.02%)</title><rect x="66.2955%" y="245" width="0.0188%" height="15" fill="rgb(254,182,12)" fg:x="10598" fg:w="3"/><text x="66.5098%" y="255.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (3 samples, 0.02%)</title><rect x="66.2955%" y="229" width="0.0188%" height="15" fill="rgb(241,200,23)" fg:x="10598" fg:w="3"/><text x="66.5098%" y="239.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (3 samples, 0.02%)</title><rect x="66.2955%" y="213" width="0.0188%" height="15" fill="rgb(254,182,12)" fg:x="10598" fg:w="3"/><text x="66.5098%" y="223.50"></text></g><g><title>operator new (2 samples, 0.01%)</title><rect x="66.3018%" y="197" width="0.0125%" height="15" fill="rgb(214,91,1)" fg:x="10599" fg:w="2"/><text x="66.5160%" y="207.50"></text></g><g><title>[unknown] (10,596 samples, 66.28%)</title><rect x="0.0375%" y="293" width="66.2830%" height="15" fill="rgb(227,28,50)" fg:x="6" fg:w="10596"/><text x="0.2518%" y="303.50">[unknown]</text></g><g><title>AConnection::onPollIn (10,596 samples, 66.28%)</title><rect x="0.0375%" y="277" width="66.2830%" height="15" fill="rgb(238,25,4)" fg:x="6" fg:w="10596"/><text x="0.2518%" y="287.50">AConnection::onPollIn</text></g><g><title>__GI_exit (2 samples, 0.01%)</title><rect x="66.3205%" y="245" width="0.0125%" height="15" fill="rgb(245,203,1)" fg:x="10602" fg:w="2"/><text x="66.5348%" y="255.50"></text></g><g><title>__run_exit_handlers (2 samples, 0.01%)</title><rect x="66.3205%" y="229" width="0.0125%" height="15" fill="rgb(235,205,5)" fg:x="10602" fg:w="2"/><text x="66.5348%" y="239.50"></text></g><g><title>__vdso_time (4 samples, 0.03%)</title><rect x="66.4644%" y="197" width="0.0250%" height="15" fill="rgb(223,154,41)" fg:x="10625" fg:w="4"/><text x="66.6787%" y="207.50"></text></g><g><title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt; &gt;::operator++ (10 samples, 0.06%)</title><rect x="66.4894%" y="197" width="0.0626%" height="15" fill="rgb(237,1,13)" fg:x="10629" fg:w="10"/><text x="66.7037%" y="207.50"></text></g><g><title>std::_Rb_tree_increment (10 samples, 0.06%)</title><rect x="66.4894%" y="181" width="0.0626%" height="15" fill="rgb(205,67,33)" fg:x="10629" fg:w="10"/><text x="66.7037%" y="191.50"></text></g><g><title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt; &gt;::operator (7 samples, 0.04%)</title><rect x="66.5520%" y="197" width="0.0438%" height="15" fill="rgb(205,40,48)" fg:x="10639" fg:w="7"/><text x="66.7663%" y="207.50"></text></g><g><title> (7 samples, 0.04%)</title><rect x="66.5520%" y="181" width="0.0438%" height="15" fill="rgb(223,113,14)" fg:x="10639" fg:w="7"/><text x="66.7663%" y="191.50"></text></g><g><title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt; &gt;::_M_valptr (4 samples, 0.03%)</title><rect x="66.5707%" y="165" width="0.0250%" height="15" fill="rgb(227,111,6)" fg:x="10642" fg:w="4"/><text x="66.7850%" y="175.50"></text></g><g><title>Http::updateCache (52 samples, 0.33%)</title><rect x="66.3643%" y="229" width="0.3253%" height="15" fill="rgb(246,197,10)" fg:x="10609" fg:w="52"/><text x="66.5786%" y="239.50"></text></g><g><title>Cache::update (47 samples, 0.29%)</title><rect x="66.3956%" y="213" width="0.2940%" height="15" fill="rgb(241,194,37)" fg:x="10614" fg:w="47"/><text x="66.6099%" y="223.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, Cache::data_s, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt; &gt; &gt;::begin (15 samples, 0.09%)</title><rect x="66.5958%" y="197" width="0.0938%" height="15" fill="rgb(218,42,53)" fg:x="10646" fg:w="15"/><text x="66.8101%" y="207.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, Cache::data_s&gt; &gt; &gt;::begin (10 samples, 0.06%)</title><rect x="66.6270%" y="181" width="0.0626%" height="15" fill="rgb(244,37,52)" fg:x="10651" fg:w="10"/><text x="66.8413%" y="191.50"></text></g><g><title>__vdso_gettimeofday (5 samples, 0.03%)</title><rect x="67.2964%" y="165" width="0.0313%" height="15" fill="rgb(246,114,18)" fg:x="10758" fg:w="5"/><text x="67.5107%" y="175.50"></text></g><g><title>AConnection::onNoPollEvent (19 samples, 0.12%)</title><rect x="67.2714%" y="181" width="0.1189%" height="15" fill="rgb(239,49,17)" fg:x="10754" fg:w="19"/><text x="67.4856%" y="191.50"></text></g><g><title>operator- (10 samples, 0.06%)</title><rect x="67.3277%" y="165" width="0.0626%" height="15" fill="rgb(208,63,48)" fg:x="10763" fg:w="10"/><text x="67.5419%" y="175.50"></text></g><g><title>__libc_send (40 samples, 0.25%)</title><rect x="67.8344%" y="165" width="0.2502%" height="15" fill="rgb(249,28,5)" fg:x="10844" fg:w="40"/><text x="68.0486%" y="175.50"></text></g><g><title>__GI___munmap (2 samples, 0.01%)</title><rect x="68.1096%" y="133" width="0.0125%" height="15" fill="rgb(214,177,17)" fg:x="10888" fg:w="2"/><text x="68.3239%" y="143.50"></text></g><g><title>__GI___libc_free (6 samples, 0.04%)</title><rect x="68.0908%" y="149" width="0.0375%" height="15" fill="rgb(247,8,17)" fg:x="10885" fg:w="6"/><text x="68.3051%" y="159.50"></text></g><g><title>std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_istringstream (10 samples, 0.06%)</title><rect x="68.0846%" y="165" width="0.0626%" height="15" fill="rgb(216,150,20)" fg:x="10884" fg:w="10"/><text x="68.2989%" y="175.50"></text></g><g><title>std::ios_base::~ios_base (2 samples, 0.01%)</title><rect x="68.1346%" y="149" width="0.0125%" height="15" fill="rgb(222,137,36)" fg:x="10892" fg:w="2"/><text x="68.3489%" y="159.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::eof (9 samples, 0.06%)</title><rect x="68.1471%" y="165" width="0.0563%" height="15" fill="rgb(228,109,10)" fg:x="10894" fg:w="9"/><text x="68.3614%" y="175.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::fail (11 samples, 0.07%)</title><rect x="68.2034%" y="165" width="0.0688%" height="15" fill="rgb(227,84,25)" fg:x="10903" fg:w="11"/><text x="68.4177%" y="175.50"></text></g><g><title>std::istream::gcount (14 samples, 0.09%)</title><rect x="68.2722%" y="165" width="0.0876%" height="15" fill="rgb(237,177,53)" fg:x="10914" fg:w="14"/><text x="68.4865%" y="175.50"></text></g><g><title>[libstdc++.so.6.0.30] (3 samples, 0.02%)</title><rect x="68.5099%" y="149" width="0.0188%" height="15" fill="rgb(231,140,31)" fg:x="10952" fg:w="3"/><text x="68.7242%" y="159.50"></text></g><g><title>[libstdc++.so.6.0.30] (2 samples, 0.01%)</title><rect x="68.6538%" y="133" width="0.0125%" height="15" fill="rgb(231,140,31)" fg:x="10975" fg:w="2"/><text x="68.8681%" y="143.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4,772 samples, 29.85%)</title><rect x="68.6663%" y="133" width="29.8511%" height="15" fill="rgb(207,210,15)" fg:x="10977" fg:w="4772"/><text x="68.8806%" y="143.50">__memcpy_avx_unaligned_erms</text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (4,839 samples, 30.27%)</title><rect x="68.5287%" y="149" width="30.2702%" height="15" fill="rgb(207,181,27)" fg:x="10955" fg:w="4839"/><text x="68.7430%" y="159.50">std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsge..</text></g><g><title>__memmove_avx_unaligned (45 samples, 0.28%)</title><rect x="98.5175%" y="133" width="0.2815%" height="15" fill="rgb(223,105,5)" fg:x="15749" fg:w="45"/><text x="98.7317%" y="143.50"></text></g><g><title>std::istream::read (4,911 samples, 30.72%)</title><rect x="68.3598%" y="165" width="30.7206%" height="15" fill="rgb(248,197,32)" fg:x="10928" fg:w="4911"/><text x="68.5741%" y="175.50">std::istream::read</text></g><g><title>std::istream::sentry::sentry (45 samples, 0.28%)</title><rect x="98.7989%" y="149" width="0.2815%" height="15" fill="rgb(232,168,44)" fg:x="15794" fg:w="45"/><text x="99.0132%" y="159.50"></text></g><g><title>std::queue&lt;std::istream*, std::deque&lt;std::istream*, std::allocator&lt;std::istream*&gt; &gt; &gt;::front (40 samples, 0.25%)</title><rect x="99.0804%" y="165" width="0.2502%" height="15" fill="rgb(228,85,38)" fg:x="15839" fg:w="40"/><text x="99.2947%" y="175.50"></text></g><g><title>std::deque&lt;std::istream*, std::allocator&lt;std::istream*&gt; &gt;::front (31 samples, 0.19%)</title><rect x="99.1367%" y="149" width="0.1939%" height="15" fill="rgb(205,23,33)" fg:x="15848" fg:w="31"/><text x="99.3510%" y="159.50"></text></g><g><title>std::deque&lt;std::istream*, std::allocator&lt;std::istream*&gt; &gt;::begin (27 samples, 0.17%)</title><rect x="99.1618%" y="133" width="0.1689%" height="15" fill="rgb(244,184,36)" fg:x="15852" fg:w="27"/><text x="99.3761%" y="143.50"></text></g><g><title>std::_Deque_iterator&lt;std::istream*, std::istream*&amp;, std::istream**&gt;::_Deque_iterator (22 samples, 0.14%)</title><rect x="99.1930%" y="117" width="0.1376%" height="15" fill="rgb(229,229,48)" fg:x="15857" fg:w="22"/><text x="99.4073%" y="127.50"></text></g><g><title>AConnection::onPollOut (5,107 samples, 31.95%)</title><rect x="67.3902%" y="181" width="31.9467%" height="15" fill="rgb(247,1,19)" fg:x="10773" fg:w="5107"/><text x="67.6045%" y="191.50">AConnection::onPollOut</text></g><g><title>AConnection::onPollEvent (5,192 samples, 32.48%)</title><rect x="67.1212%" y="197" width="32.4784%" height="15" fill="rgb(240,200,10)" fg:x="10730" fg:w="5192"/><text x="67.3355%" y="207.50">AConnection::onPollEvent</text></g><g><title>__vdso_gettimeofday (42 samples, 0.26%)</title><rect x="99.3369%" y="181" width="0.2627%" height="15" fill="rgb(246,114,18)" fg:x="15880" fg:w="42"/><text x="99.5512%" y="191.50"></text></g><g><title>Address::Address (2 samples, 0.01%)</title><rect x="99.6184%" y="181" width="0.0125%" height="15" fill="rgb(231,26,17)" fg:x="15925" fg:w="2"/><text x="99.8327%" y="191.50"></text></g><g><title>Address::~Address (2 samples, 0.01%)</title><rect x="99.6309%" y="181" width="0.0125%" height="15" fill="rgb(211,197,29)" fg:x="15927" fg:w="2"/><text x="99.8452%" y="191.50"></text></g><g><title>ListenSocket::onPollEvent (11 samples, 0.07%)</title><rect x="99.5996%" y="197" width="0.0688%" height="15" fill="rgb(234,106,36)" fg:x="15922" fg:w="11"/><text x="99.8139%" y="207.50"></text></g><g><title>Http::Http (4 samples, 0.03%)</title><rect x="99.6434%" y="181" width="0.0250%" height="15" fill="rgb(216,154,36)" fg:x="15929" fg:w="4"/><text x="99.8577%" y="191.50"></text></g><g><title>toString&lt;Address&amp;&gt; (2 samples, 0.01%)</title><rect x="99.6559%" y="165" width="0.0125%" height="15" fill="rgb(233,146,38)" fg:x="15931" fg:w="2"/><text x="99.8702%" y="175.50"></text></g><g><title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream (2 samples, 0.01%)</title><rect x="99.6559%" y="149" width="0.0125%" height="15" fill="rgb(230,13,26)" fg:x="15931" fg:w="2"/><text x="99.8702%" y="159.50"></text></g><g><title>std::vector&lt;IFileDescriptor*, std::allocator&lt;IFileDescriptor*&gt; &gt;::operator[] (4 samples, 0.03%)</title><rect x="99.6747%" y="197" width="0.0250%" height="15" fill="rgb(253,115,3)" fg:x="15934" fg:w="4"/><text x="99.8890%" y="207.50"></text></g><g><title>std::vector&lt;IFileDescriptor*, std::allocator&lt;IFileDescriptor*&gt; &gt;::size (3 samples, 0.02%)</title><rect x="99.6997%" y="197" width="0.0188%" height="15" fill="rgb(229,159,38)" fg:x="15938" fg:w="3"/><text x="99.9140%" y="207.50"></text></g><g><title>Poll::iterate (5,292 samples, 33.10%)</title><rect x="66.7522%" y="213" width="33.1040%" height="15" fill="rgb(241,227,18)" fg:x="10671" fg:w="5292"/><text x="66.9664%" y="223.50">Poll::iterate</text></g><g><title>std::vector&lt;pollfd, std::allocator&lt;pollfd&gt; &gt;::operator[] (22 samples, 0.14%)</title><rect x="99.7185%" y="197" width="0.1376%" height="15" fill="rgb(219,78,45)" fg:x="15941" fg:w="22"/><text x="99.9328%" y="207.50"></text></g><g><title>__GI___poll (13 samples, 0.08%)</title><rect x="99.8561%" y="213" width="0.0813%" height="15" fill="rgb(218,57,36)" fg:x="15963" fg:w="13"/><text x="100.0704%" y="223.50"></text></g><g><title>std::vector&lt;pollfd, std::allocator&lt;pollfd&gt; &gt;::data (5 samples, 0.03%)</title><rect x="99.9374%" y="213" width="0.0313%" height="15" fill="rgb(213,156,9)" fg:x="15976" fg:w="5"/><text x="100.1517%" y="223.50"></text></g><g><title>std::vector&lt;pollfd, std::allocator&lt;pollfd&gt; &gt;::_M_data_ptr&lt;pollfd&gt; (4 samples, 0.03%)</title><rect x="99.9437%" y="197" width="0.0250%" height="15" fill="rgb(236,85,54)" fg:x="15977" fg:w="4"/><text x="100.1580%" y="207.50"></text></g><g><title>Poll::poll (5,321 samples, 33.29%)</title><rect x="66.6896%" y="229" width="33.2854%" height="15" fill="rgb(241,47,17)" fg:x="10661" fg:w="5321"/><text x="66.9039%" y="239.50">Poll::poll</text></g><g><title>_start (5,382 samples, 33.67%)</title><rect x="66.3205%" y="293" width="33.6670%" height="15" fill="rgb(210,219,27)" fg:x="10602" fg:w="5382"/><text x="66.5348%" y="303.50">_start</text></g><g><title>__libc_start_main_impl (5,382 samples, 33.67%)</title><rect x="66.3205%" y="277" width="33.6670%" height="15" fill="rgb(228,214,28)" fg:x="10602" fg:w="5382"/><text x="66.5348%" y="287.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (5,382 samples, 33.67%)</title><rect x="66.3205%" y="261" width="33.6670%" height="15" fill="rgb(249,173,1)" fg:x="10602" fg:w="5382"/><text x="66.5348%" y="271.50">__libc_start_call_main</text></g><g><title>main (5,380 samples, 33.65%)</title><rect x="66.3330%" y="245" width="33.6544%" height="15" fill="rgb(238,28,47)" fg:x="10604" fg:w="5380"/><text x="66.5473%" y="255.50">main</text></g><g><title>loadConfig (2 samples, 0.01%)</title><rect x="99.9750%" y="229" width="0.0125%" height="15" fill="rgb(216,190,24)" fg:x="15982" fg:w="2"/><text x="100.1893%" y="239.50"></text></g><g><title>Config::parseContext (2 samples, 0.01%)</title><rect x="99.9750%" y="213" width="0.0125%" height="15" fill="rgb(250,19,45)" fg:x="15982" fg:w="2"/><text x="100.1893%" y="223.50"></text></g><g><title>Config::processContext (2 samples, 0.01%)</title><rect x="99.9750%" y="197" width="0.0125%" height="15" fill="rgb(235,18,8)" fg:x="15982" fg:w="2"/><text x="100.1893%" y="207.50"></text></g><g><title>all (15,986 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(206,183,37)" fg:x="0" fg:w="15986"/><text x="0.2143%" y="335.50"></text></g><g><title>webserv (15,986 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(207,222,45)" fg:x="0" fg:w="15986"/><text x="0.2143%" y="319.50">webserv</text></g></svg></svg>